// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable.player.DroneControlsData in improbable/player/DroneControls.schema.

namespace Improbable.Player
{

public partial struct DroneControlsData : global::System.IEquatable<DroneControlsData>
{
  /// <summary>
  /// Field force = 1.
  /// </summary>
  public global::Improbable.Math.Vector3f force;

  public DroneControlsData(global::Improbable.Math.Vector3f force)
  {
    this.force = force;
  }

  public DroneControlsData DeepCopy()
  {
    var _result = new DroneControlsData();
    _result.force = force.DeepCopy();
    return _result;

  }

  public override bool Equals(object _obj)
  {
    return _obj is DroneControlsData && Equals((DroneControlsData) _obj);
  }

  public static bool operator==(DroneControlsData a, DroneControlsData b)
  {
    return a.Equals(b);
  }

  public static bool operator!=(DroneControlsData a, DroneControlsData b)
  {
    return !a.Equals(b);
  }

  public bool Equals(DroneControlsData _obj)
  {
    return
        force == _obj.force;
  }

  public override int GetHashCode()
  {
    int _result = 1327;
    _result = (_result * 977) + force.GetHashCode();
    return _result;
  }
}

public static class DroneControlsData_Internal
{
  public static global::Schema.Improbable.Player.DroneControlsData Serialize(DroneControlsData _data)
  {
    var _proto = new global::Schema.Improbable.Player.DroneControlsData();
    _proto.Field1Force = global::Improbable.Math.Vector3f_Internal.Serialize(_data.force);
    return _proto;
  }

  public static DroneControlsData Deserialize(global::Schema.Improbable.Player.DroneControlsData _proto)
  {
    DroneControlsData _data;
    _data.force = global::Improbable.Math.Vector3f_Internal.Deserialize(_proto.Field1Force);
    return _data;
  }
}

}
