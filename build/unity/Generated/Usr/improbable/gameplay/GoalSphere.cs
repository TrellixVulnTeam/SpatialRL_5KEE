// Generated by SpatialOS codegen. DO NOT EDIT!
// source: GoalSphere in improbable/gameplay/GoalSphere.schema.

namespace Improbable.Gameplay
{

public static class GoalSphere_Extensions
{
  public static GoalSphere.Data Get(this global::Improbable.Worker.IComponentData<GoalSphere> data)
  {
    return (GoalSphere.Data) data;
  }

  public static GoalSphere.Update Get(this global::Improbable.Worker.IComponentUpdate<GoalSphere> update)
  {
    return (GoalSphere.Update) update;
  }
}

public partial class GoalSphere : global::Improbable.Worker.IComponentMetaclass
{
  public static uint ComponentId = 1005;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the GoalSphere component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<GoalSphere>
  {
    public global::Improbable.Gameplay.GoalSphereData Value;

    public Data(global::Improbable.Gameplay.GoalSphereData value)
    {
      Value = value;
    }

    public Data(bool collided)
    {
      Value = new global::Improbable.Gameplay.GoalSphereData(collided);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<GoalSphere> ToUpdate()
    {
      var update = new Update();
      update.SetCollided(Value.collided);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the GoalSphere component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<GoalSphere>
  {
    /// <summary>
    /// Field collided = 1.
    /// </summary>
    public global::Improbable.Collections.Option<bool> collided;
    public Update SetCollided(bool _value)
    {
      collided.Set(_value);
      return this;
    }

    /// <summary>
    /// Event field collide.
    /// </summary>
    public global::Improbable.Collections.List<global::Improbable.Gameplay.Collision> collide = new global::Improbable.Collections.List<global::Improbable.Gameplay.Collision>();
    public Update AddCollide(global::Improbable.Gameplay.Collision _value)
    {
      collide.Add(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (collided.HasValue)
      {
        bool field;
        field = collided.Value;
        _result.collided.Set(field);
      }
      _result.collide = new global::Improbable.Collections.List<global::Improbable.Gameplay.Collision>(collide.Count);
      for (int _i = 0; _i < collide.Count; ++_i)
      {
        _result.collide.Add(collide[_i].DeepCopy());
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<GoalSphere> ToInitialData()
    {
      return new Data(new global::Improbable.Gameplay.GoalSphereData(collided.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<GoalSphere> _data)
    {
      var _concrete = _data.Get();
      if (collided.HasValue)
      {
        _concrete.Value.collided = collided.Value;
      }
    }
  }

  public partial class Commands
  {
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ClientComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      vtable.BufferFree = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientObjects.ClientBufferFree);
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientObjects.ClientFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientObjects.ClientCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientSerialize);
      return vtable;
    }
  }

  public void AddToEntityWithInitialData(global::Improbable.Worker.Internal.ComponentProtocol.ClientObject update,
                                         global::Improbable.Worker.Entity entity)
  {
    var dereferenced = (global::Improbable.Worker.IComponentUpdate<GoalSphere>)
        global::Improbable.Worker.Internal.ClientObjects.Instance
        .Dereference(update.Reference);
    entity.Add<GoalSphere>(dereferenced.ToInitialData());
  }

  public object ExtractAsUpdate(global::Improbable.Worker.Entity entity)
  {
    return entity.Get<GoalSphere>().Value.ToUpdate();
  }

  public void TrackComponent(global::Improbable.Worker.View view)
  {
    view.OnAddComponent<GoalSphere>(op =>
    {
      if (view.Entities.ContainsKey(op.EntityId))
      {
        view.Entities[op.EntityId].Add<GoalSphere>(op.Data);
      }
    });
    view.OnRemoveComponent<GoalSphere>(op =>
    {
      if (view.Entities.ContainsKey(op.EntityId))
      {
        view.Entities[op.EntityId].Remove<GoalSphere>();
      }
    });
    view.OnAuthorityChange<GoalSphere>(op =>
    {
      if (view.Entities.ContainsKey(op.EntityId))
      {
        view.Entities[op.EntityId].SetAuthority<GoalSphere>(op.HasAuthority);
      }
    });
    view.OnComponentUpdate<GoalSphere>(op =>
    {
      if (view.Entities.ContainsKey(op.EntityId))
      {
        view.Entities[op.EntityId].Update<GoalSphere>(op.Update);
      }
    });
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize
      clientDeserialize = ClientDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize
      clientSerialize = ClientSerialize;

  private static unsafe bool
  ClientDeserialize(global::System.UInt32 componentId,
                    global::System.Byte objType,
                    global::System.Byte* buffer,
                    global::System.UInt32 length,
                    global::Improbable.Worker.Internal.ComponentProtocol.ClientObject** obj)
  {
    *obj = null;
    try
    {
      *obj = global::Improbable.Worker.Internal.ClientObjects.ObjectAlloc();
      if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Update) {
        var data = new Update();
        (*obj)->Reference = global::Improbable.Worker.Internal.ClientObjects.Instance
            .CreateReference(data);
        var stream = new global::System.IO.UnmanagedMemoryStream(buffer, (long) length);
        var protoWrapper = global::ProtoBuf.Serializer
            .Deserialize<global::Schema.Improbable.EntityComponentUpdate>(stream);
        if (protoWrapper.EntityState != null)
        {
          global::Schema.Improbable.Gameplay.GoalSphereData _proto;
          if (global::ProtoBuf.Extensible.TryGetValue<global::Schema.Improbable.Gameplay.GoalSphereData>(
                  protoWrapper.EntityState, (int) 1005, out _proto))
          {
            if (_proto.Field1CollidedSpecified)
            {
              bool field;
              field = _proto.Field1Collided;
              data.collided.Set(field);
            }
          }
        }
        if (protoWrapper.EntityEvent != null)
        {
          global::Schema.Improbable.Gameplay.GoalSphere.Events _proto;
          if (global::ProtoBuf.Extensible.TryGetValue<global::Schema.Improbable.Gameplay.GoalSphere.Events>(
                  protoWrapper.EntityEvent, (int) 1005, out _proto))
          {
            data.collide = new global::Improbable.Collections.List<global::Improbable.Gameplay.Collision>(_proto.EventCollide.Count);
            for (int _i = 0; _i < _proto.EventCollide.Count; ++_i)
            {
              data.collide.Add(global::Improbable.Gameplay.Collision_Internal.Deserialize(_proto.EventCollide[_i]));
            }
          }
        }
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Snapshot)
      {
        var data = new Update();
        (*obj)->Reference = global::Improbable.Worker.Internal.ClientObjects.Instance
            .CreateReference(data);
        var stream = new global::System.IO.UnmanagedMemoryStream(buffer, (long) length);
        var protoWrapper = global::ProtoBuf.Serializer
            .Deserialize<global::Schema.Improbable.EntityState>(stream);
        var _proto = global::ProtoBuf.Extensible.GetValue<global::Schema.Improbable.Gameplay.GoalSphereData>(
            protoWrapper, (int) 1005);
        {
          bool field;
          field = _proto.Field1Collided;
          data.collided.Set(field);
        }
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Request)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        (*obj)->Reference = global::Improbable.Worker.Internal.ClientObjects.Instance
            .CreateReference(data);
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Response)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        (*obj)->Reference = global::Improbable.Worker.Internal.ClientObjects.Instance
            .CreateReference(data);
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return false;
    }
    return true;
  }

  private static unsafe void
  ClientSerialize(global::System.UInt32 componentId,
                  global::System.Byte objType,
                  global::Improbable.Worker.Internal.ComponentProtocol.ClientObject* obj,
                  global::System.Byte** buffer,
                  global::System.UInt32* length)
  {
    *buffer = null;
    try
    {
      if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Update) {
        var protoWrapper = new global::Schema.Improbable.EntityComponentUpdate();
        var data = (Update) global::Improbable.Worker.Internal.ClientObjects.Instance.Dereference(obj->Reference);
        {
          var _proto = new global::Schema.Improbable.Gameplay.GoalSphereData();
          if (data.collided.HasValue)
          {
            _proto.Field1Collided = data.collided.Value;
          }
          protoWrapper.EntityState = new global::Schema.Improbable.EntityState();
          global::ProtoBuf.Extensible.AppendValue(protoWrapper.EntityState, 1005, _proto);
        }
        {
          var _proto = new global::Schema.Improbable.Gameplay.GoalSphere.Events();
          for (int _i = 0; _i < data.collide.Count; ++_i)
          {
            _proto.EventCollide.Add(global::Improbable.Gameplay.Collision_Internal.Serialize(data.collide[_i]));
          }
          protoWrapper.EntityEvent = new global::Schema.Improbable.EntityEvent();
          global::ProtoBuf.Extensible.AppendValue(protoWrapper.EntityEvent, 1005, _proto);
        }
        using (var stream = new global::Improbable.Worker.Internal.ExpandableUnmanagedMemoryStream())
        {
          global::ProtoBuf.Serializer.Serialize(stream, protoWrapper);
          *buffer = stream.TakeOwnershipOfBuffer();
          *length = (uint) stream.Length;
        }
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Snapshot) {
        var protoWrapper = new global::Schema.Improbable.EntityState();
        var _proto = new global::Schema.Improbable.Gameplay.GoalSphereData();
        var data = (Update) global::Improbable.Worker.Internal.ClientObjects.Instance.Dereference(obj->Reference);
        _proto.Field1Collided = data.collided.Value;
        global::ProtoBuf.Extensible.AppendValue(protoWrapper, 1005, _proto);
        using (var stream = new global::Improbable.Worker.Internal.ExpandableUnmanagedMemoryStream())
        {
          global::ProtoBuf.Serializer.Serialize(stream, protoWrapper);
          *buffer = stream.TakeOwnershipOfBuffer();
          *length = (uint) stream.Length;
        }
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Request)
      {
        var protoWrapper = new global::Schema.Improbable.EntityCommand();
        var _proto = new global::Schema.Improbable.Gameplay.GoalSphere.Commands();
        global::ProtoBuf.Extensible.AppendValue(protoWrapper, 1005, _proto);
        using (var stream = new global::Improbable.Worker.Internal.ExpandableUnmanagedMemoryStream())
        {
          global::ProtoBuf.Serializer.Serialize(stream, protoWrapper);
          *buffer = stream.TakeOwnershipOfBuffer();
          *length = (uint) stream.Length;
        }
      }
      else if (objType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientObjectType.Response)
      {
        var protoWrapper = new global::Schema.Improbable.EntityCommand();
        var _proto = new global::Schema.Improbable.Gameplay.GoalSphere.Commands();
        global::ProtoBuf.Extensible.AppendValue(protoWrapper, 1005, _proto);
        using (var stream = new global::Improbable.Worker.Internal.ExpandableUnmanagedMemoryStream())
        {
          global::ProtoBuf.Serializer.Serialize(stream, protoWrapper);
          *buffer = stream.TakeOwnershipOfBuffer();
          *length = (uint) stream.Length;
        }
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
