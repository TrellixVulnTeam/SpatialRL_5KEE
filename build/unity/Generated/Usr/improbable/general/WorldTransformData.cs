// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable.general.WorldTransformData in improbable/general/WorldTransform.schema.

namespace Improbable.General
{

public partial struct WorldTransformData : global::System.IEquatable<WorldTransformData>
{
  /// <summary>
  /// Field position = 1.
  /// </summary>
  public global::Improbable.Math.Coordinates position;
  /// <summary>
  /// Field rotation = 2.
  /// </summary>
  public uint rotation;

  public WorldTransformData(
      global::Improbable.Math.Coordinates position,
      uint rotation)
  {
    this.position = position;
    this.rotation = rotation;
  }

  public WorldTransformData DeepCopy()
  {
    var _result = new WorldTransformData();
    _result.position = position.DeepCopy();
    _result.rotation = rotation;
    return _result;

  }

  public override bool Equals(object _obj)
  {
    return _obj is WorldTransformData && Equals((WorldTransformData) _obj);
  }

  public static bool operator==(WorldTransformData a, WorldTransformData b)
  {
    return a.Equals(b);
  }

  public static bool operator!=(WorldTransformData a, WorldTransformData b)
  {
    return !a.Equals(b);
  }

  public bool Equals(WorldTransformData _obj)
  {
    return
        position == _obj.position &&
        rotation == _obj.rotation;
  }

  public override int GetHashCode()
  {
    int _result = 1327;
    _result = (_result * 977) + position.GetHashCode();
    _result = (_result * 977) + rotation.GetHashCode();
    return _result;
  }
}

public static class WorldTransformData_Internal
{
  public static global::Schema.Improbable.General.WorldTransformData Serialize(WorldTransformData _data)
  {
    var _proto = new global::Schema.Improbable.General.WorldTransformData();
    _proto.Field1Position = global::Improbable.Math.Coordinates_Internal.Serialize(_data.position);
    _proto.Field2Rotation = _data.rotation;
    return _proto;
  }

  public static WorldTransformData Deserialize(global::Schema.Improbable.General.WorldTransformData _proto)
  {
    WorldTransformData _data;
    _data.position = global::Improbable.Math.Coordinates_Internal.Deserialize(_proto.Field1Position);
    _data.rotation = _proto.Field2Rotation;
    return _data;
  }
}

}
