// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable.WorkerPredicate in improbable/standard_library.schema.

namespace Improbable
{

public partial struct WorkerPredicate : global::System.IEquatable<WorkerPredicate>
{
  /// <summary>
  /// Field claim = 1.
  /// </summary>
  public global::Improbable.Collections.List<global::Improbable.WorkerClaim> claim;

  public WorkerPredicate(global::Improbable.Collections.List<global::Improbable.WorkerClaim> claim)
  {
    this.claim = claim;
  }

  public WorkerPredicate DeepCopy()
  {
    var _result = new WorkerPredicate();
    _result.claim = new global::Improbable.Collections.List<global::Improbable.WorkerClaim>(claim.Count);
    for (int _i = 0; _i < claim.Count; ++_i)
    {
      _result.claim.Add(claim[_i].DeepCopy());
    }
    return _result;

  }

  public override bool Equals(object _obj)
  {
    return _obj is WorkerPredicate && Equals((WorkerPredicate) _obj);
  }

  public static bool operator==(WorkerPredicate a, WorkerPredicate b)
  {
    return a.Equals(b);
  }

  public static bool operator!=(WorkerPredicate a, WorkerPredicate b)
  {
    return !a.Equals(b);
  }

  public bool Equals(WorkerPredicate _obj)
  {
    return
        claim == _obj.claim;
  }

  public override int GetHashCode()
  {
    int _result = 1327;
    _result = (_result * 977) + (claim == null ? 0 : claim.GetHashCode());
    return _result;
  }
}

public static class WorkerPredicate_Internal
{
  public static global::Schema.Improbable.WorkerPredicate Serialize(WorkerPredicate _data)
  {
    var _proto = new global::Schema.Improbable.WorkerPredicate();
    for (int _i = 0; _i < _data.claim.Count; ++_i)
    {
      _proto.Field1Claim.Add(global::Improbable.WorkerClaim_Internal.Serialize(_data.claim[_i]));
    }
    return _proto;
  }

  public static WorkerPredicate Deserialize(global::Schema.Improbable.WorkerPredicate _proto)
  {
    WorkerPredicate _data;
    _data.claim = new global::Improbable.Collections.List<global::Improbable.WorkerClaim>(_proto.Field1Claim.Count);
    for (int _i = 0; _i < _proto.Field1Claim.Count; ++_i)
    {
      _data.claim.Add(global::Improbable.WorkerClaim_Internal.Deserialize(_proto.Field1Claim[_i]));
    }
    return _data;
  }
}

}
