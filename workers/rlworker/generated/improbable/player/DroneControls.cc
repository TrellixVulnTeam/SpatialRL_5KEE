// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/DroneControls.schema
#include <improbable/player/DroneControls.h>
#include <improbable/entity_state.pb.h>
#include <improbable/player/DroneControls.pb.h>

namespace improbable {
namespace player {

// Implementation of DroneControlsData.
//----------------------------------------------------------------

DroneControlsData::DroneControlsData(const ::improbable::math::Vector3f& force)
: _force{force} {}

bool DroneControlsData::operator==(const DroneControlsData& value) const {
  return
      _force == value._force;
}

bool DroneControlsData::operator!=(const DroneControlsData& value) const {
  return !operator==(value);
}

const ::improbable::math::Vector3f& DroneControlsData::force() const {
  return _force;
}

::improbable::math::Vector3f& DroneControlsData::force() {
  return _force;
}

DroneControlsData& DroneControlsData::set_force(const ::improbable::math::Vector3f& value) {
  _force = value;
  return *this;
}

// Implementation of DroneControls.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId DroneControls::ComponentId;

bool DroneControls::Update::operator==(const DroneControls::Update& value) const {
  return
      _force == value._force;
}

bool DroneControls::Update::operator!=(const DroneControls::Update& value) const {
  return !operator==(value);
}

DroneControls::Update DroneControls::Update::FromInitialData(const ::improbable::player::DroneControlsData& data) {
  DroneControls::Update update;
  update._force.emplace(data.force());
  return update;
}

::improbable::player::DroneControlsData DroneControls::Update::ToInitialData() const {
  return ::improbable::player::DroneControlsData(*_force);
}

void DroneControls::Update::ApplyTo(::improbable::player::DroneControlsData& data) const {
  if (_force) {
    data.set_force(*_force);
  }
}

const ::worker::Option< ::improbable::math::Vector3f >& DroneControls::Update::force() const {
  return _force;
}

::worker::Option< ::improbable::math::Vector3f >& DroneControls::Update::force() {
  return _force;
}

DroneControls::Update& DroneControls::Update::set_force(const ::improbable::math::Vector3f& value) {
  _force.emplace(value); return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_DroneControlsData(
    const ::improbable::player::DroneControlsData& data,
    ::schema::improbable::player::DroneControlsData& proto) {
  ::improbable::math::detail::Serialize_Vector3f(data.force(), *proto.mutable_field1_force());
}

::improbable::player::DroneControlsData Deserialize_DroneControlsData(
    const ::schema::improbable::player::DroneControlsData& proto) {
  ::improbable::player::DroneControlsData result{
      ::improbable::math::detail::Deserialize_Vector3f(proto.field1_force())};
  return result;
}

namespace {

void VtableBufferFree_DroneControls(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_DroneControls(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::player::DroneControls::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_DroneControls* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_DroneControls(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    return new ::improbable::player::DroneControls::Update(*static_cast<const ::improbable::player::DroneControls::Update*>(object));
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    return new GenericCommandObject_DroneControls(
        *static_cast<const GenericCommandObject_DroneControls*>(object));
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_DroneControls(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::player::DroneControls::Update;
    auto client_object = static_cast< ::improbable::player::DroneControls::Update* >(*object);
    {
      const auto& proto = proto_wrapper.entity_state().GetExtension(::schema::improbable::player::DroneControls::component_extension);

      std::set<std::uint32_t> fields_to_clear{proto_wrapper.fields_to_clear().begin(),
                                              proto_wrapper.fields_to_clear().end()};
      if (proto.has_field1_force()) {
        client_object->force().emplace(::improbable::math::detail::Deserialize_Vector3f(proto.field1_force()));
      }
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::player::DroneControls::Update;
    auto client_object = static_cast< ::improbable::player::DroneControls::Update* >(*object);
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::player::DroneControls::component_extension);

    client_object->force().emplace(::improbable::math::detail::Deserialize_Vector3f(proto.field1_force()));
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  }
  return true;
}

void VtableSerialize_DroneControls(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::DroneControls::Update*>(object);
    {
      auto& proto = *proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::player::DroneControls::component_extension);
      if (data.force()) {
        ::improbable::math::detail::Serialize_Vector3f(*data.force(), *proto.mutable_field1_force());
      }
    }
    {
      proto_wrapper.mutable_entity_event()->MutableExtension(::schema::improbable::player::DroneControls::event_extension);
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::DroneControls::Update*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::player::DroneControls::component_extension);

    ::improbable::math::detail::Serialize_Vector3f(*data.force(), *proto.mutable_field1_force());

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::player::DroneControls::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::player::DroneControls::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_DroneControls() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      1003,
      &detail::VtableBufferFree_DroneControls,
      &detail::VtableFree_DroneControls,
      &detail::VtableCopy_DroneControls,
      &detail::VtableDeserialize_DroneControls,
      &detail::VtableSerialize_DroneControls,
  };
  return vtable;
}

}  // ::detail

}  // ::player
}  // ::improbable
