// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/player/name.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/player/name.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace player {

namespace {

const ::google::protobuf::Descriptor* NameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fplayer_2fname_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fplayer_2fname_2eproto() {
  protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/player/name.proto");
  GOOGLE_CHECK(file != NULL);
  NameData_descriptor_ = file->message_type(0);
  static const int NameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameData, field1_entity_name_),
  };
  NameData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NameData_descriptor_,
      NameData::default_instance_,
      NameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameData, _has_bits_[0]),
      -1,
      -1,
      sizeof(NameData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameData, _internal_metadata_),
      -1);
  Name_descriptor_ = file->message_type(1);
  static const int Name_offsets_[1] = {
  };
  Name_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Name_descriptor_,
      Name::default_instance_,
      Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _has_bits_[0]),
      -1,
      -1,
      sizeof(Name),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _internal_metadata_),
      -1);
  Name_Events_descriptor_ = Name_descriptor_->nested_type(0);
  static const int Name_Events_offsets_[1] = {
  };
  Name_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Name_Events_descriptor_,
      Name_Events::default_instance_,
      Name_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(Name_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name_Events, _internal_metadata_),
      -1);
  Name_Commands_descriptor_ = Name_descriptor_->nested_type(1);
  static const int Name_Commands_offsets_[1] = {
  };
  Name_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Name_Commands_descriptor_,
      Name_Commands::default_instance_,
      Name_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(Name_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fplayer_2fname_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NameData_descriptor_, &NameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Name_descriptor_, &Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Name_Events_descriptor_, &Name_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Name_Commands_descriptor_, &Name_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fplayer_2fname_2eproto() {
  delete NameData::default_instance_;
  delete NameData_reflection_;
  delete Name::default_instance_;
  delete Name_reflection_;
  delete Name_Events::default_instance_;
  delete Name_Events_reflection_;
  delete Name_Commands::default_instance_;
  delete Name_Commands_reflection_;
}

void protobuf_AddDesc_improbable_2fplayer_2fname_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_improbable_2fplayer_2fname_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034improbable/player/name.proto\022\030schema.i"
    "mprobable.player\032\035improbable/entity_stat"
    "e.proto\"7\n\010NameData\022+\n\022field1_entity_nam"
    "e\030\001 \001(\tB\017\302\363\030\013entity_name\"\347\002\n\004Name\032\010\n\006Eve"
    "nts\032\n\n\010Commands2`\n\023component_extension\022\036"
    ".schema.improbable.EntityState\030\351\007 \001(\0132\"."
    "schema.improbable.player.NameData2_\n\017eve"
    "nt_extension\022\036.schema.improbable.EntityE"
    "vent\030\351\007 \001(\0132%.schema.improbable.player.N"
    "ame.Events2e\n\021command_extension\022 .schema"
    ".improbable.EntityCommand\030\351\007 \001(\0132\'.schem"
    "a.improbable.player.Name.Commands:\037\302\363\030\033\n"
    "\026improbable.player.Name\020\351\007B\020B\016NameOuterC"
    "lass", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/player/name.proto", &protobuf_RegisterTypes);
  NameData::default_instance_ = new NameData();
  Name::default_instance_ = new Name();
  Name_Events::default_instance_ = new Name_Events();
  Name_Commands::default_instance_ = new Name_Commands();
  NameData::default_instance_->InitAsDefaultInstance();
  Name::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityState::default_instance(),
    1001, 11, false, false,
    &::schema::improbable::player::NameData::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityEvent::default_instance(),
    1001, 11, false, false,
    &::schema::improbable::player::Name_Events::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityCommand::default_instance(),
    1001, 11, false, false,
    &::schema::improbable::player::Name_Commands::default_instance());
  Name_Events::default_instance_->InitAsDefaultInstance();
  Name_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fplayer_2fname_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fplayer_2fname_2eproto {
  StaticDescriptorInitializer_improbable_2fplayer_2fname_2eproto() {
    protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  }
} static_descriptor_initializer_improbable_2fplayer_2fname_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameData::kField1EntityNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameData::NameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.NameData)
}

void NameData::InitAsDefaultInstance() {
}

NameData::NameData(const NameData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.NameData)
}

void NameData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field1_entity_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameData::~NameData() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.NameData)
  SharedDtor();
}

void NameData::SharedDtor() {
  field1_entity_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameData_descriptor_;
}

const NameData& NameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  return *default_instance_;
}

NameData* NameData::default_instance_ = NULL;

NameData* NameData::New(::google::protobuf::Arena* arena) const {
  NameData* n = new NameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.NameData)
  if (has_field1_entity_name()) {
    field1_entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.NameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field1_entity_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field1_entity_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field1_entity_name().data(), this->field1_entity_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "schema.improbable.player.NameData.field1_entity_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.NameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.NameData)
  return false;
#undef DO_
}

void NameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.NameData)
  // optional string field1_entity_name = 1;
  if (has_field1_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field1_entity_name().data(), this->field1_entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema.improbable.player.NameData.field1_entity_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field1_entity_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.NameData)
}

::google::protobuf::uint8* NameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.NameData)
  // optional string field1_entity_name = 1;
  if (has_field1_entity_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field1_entity_name().data(), this->field1_entity_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema.improbable.player.NameData.field1_entity_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field1_entity_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.NameData)
  return target;
}

int NameData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.NameData)
  int total_size = 0;

  // optional string field1_entity_name = 1;
  if (has_field1_entity_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field1_entity_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.NameData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NameData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.NameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.NameData)
    MergeFrom(*source);
  }
}

void NameData::MergeFrom(const NameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.NameData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_entity_name()) {
      set_has_field1_entity_name();
      field1_entity_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field1_entity_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.NameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameData::CopyFrom(const NameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.NameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameData::IsInitialized() const {

  return true;
}

void NameData::Swap(NameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameData::InternalSwap(NameData* other) {
  field1_entity_name_.Swap(&other->field1_entity_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameData_descriptor_;
  metadata.reflection = NameData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameData

// optional string field1_entity_name = 1;
bool NameData::has_field1_entity_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameData::set_has_field1_entity_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NameData::clear_has_field1_entity_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameData::clear_field1_entity_name() {
  field1_entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1_entity_name();
}
 const ::std::string& NameData::field1_entity_name() const {
  // @@protoc_insertion_point(field_get:schema.improbable.player.NameData.field1_entity_name)
  return field1_entity_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameData::set_field1_entity_name(const ::std::string& value) {
  set_has_field1_entity_name();
  field1_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schema.improbable.player.NameData.field1_entity_name)
}
 void NameData::set_field1_entity_name(const char* value) {
  set_has_field1_entity_name();
  field1_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.improbable.player.NameData.field1_entity_name)
}
 void NameData::set_field1_entity_name(const char* value, size_t size) {
  set_has_field1_entity_name();
  field1_entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.improbable.player.NameData.field1_entity_name)
}
 ::std::string* NameData::mutable_field1_entity_name() {
  set_has_field1_entity_name();
  // @@protoc_insertion_point(field_mutable:schema.improbable.player.NameData.field1_entity_name)
  return field1_entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameData::release_field1_entity_name() {
  // @@protoc_insertion_point(field_release:schema.improbable.player.NameData.field1_entity_name)
  clear_has_field1_entity_name();
  return field1_entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameData::set_allocated_field1_entity_name(::std::string* field1_entity_name) {
  if (field1_entity_name != NULL) {
    set_has_field1_entity_name();
  } else {
    clear_has_field1_entity_name();
  }
  field1_entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1_entity_name);
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.player.NameData.field1_entity_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Name_Events::Name_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.Name.Events)
}

void Name_Events::InitAsDefaultInstance() {
}

Name_Events::Name_Events(const Name_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.Name.Events)
}

void Name_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Name_Events::~Name_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.Name.Events)
  SharedDtor();
}

void Name_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Name_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_Events_descriptor_;
}

const Name_Events& Name_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  return *default_instance_;
}

Name_Events* Name_Events::default_instance_ = NULL;

Name_Events* Name_Events::New(::google::protobuf::Arena* arena) const {
  Name_Events* n = new Name_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Name_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.Name.Events)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Name_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.Name.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.Name.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.Name.Events)
  return false;
#undef DO_
}

void Name_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.Name.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.Name.Events)
}

::google::protobuf::uint8* Name_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.Name.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.Name.Events)
  return target;
}

int Name_Events::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.Name.Events)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.Name.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Name_Events* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Name_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.Name.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.Name.Events)
    MergeFrom(*source);
  }
}

void Name_Events::MergeFrom(const Name_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.Name.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Name_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.Name.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name_Events::CopyFrom(const Name_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.Name.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name_Events::IsInitialized() const {

  return true;
}

void Name_Events::Swap(Name_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Name_Events::InternalSwap(Name_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Name_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_Events_descriptor_;
  metadata.reflection = Name_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Name_Commands::Name_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.Name.Commands)
}

void Name_Commands::InitAsDefaultInstance() {
}

Name_Commands::Name_Commands(const Name_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.Name.Commands)
}

void Name_Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Name_Commands::~Name_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.Name.Commands)
  SharedDtor();
}

void Name_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Name_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_Commands_descriptor_;
}

const Name_Commands& Name_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  return *default_instance_;
}

Name_Commands* Name_Commands::default_instance_ = NULL;

Name_Commands* Name_Commands::New(::google::protobuf::Arena* arena) const {
  Name_Commands* n = new Name_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Name_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.Name.Commands)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Name_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.Name.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.Name.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.Name.Commands)
  return false;
#undef DO_
}

void Name_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.Name.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.Name.Commands)
}

::google::protobuf::uint8* Name_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.Name.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.Name.Commands)
  return target;
}

int Name_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.Name.Commands)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.Name.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Name_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Name_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.Name.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.Name.Commands)
    MergeFrom(*source);
  }
}

void Name_Commands::MergeFrom(const Name_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.Name.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Name_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.Name.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name_Commands::CopyFrom(const Name_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.Name.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name_Commands::IsInitialized() const {

  return true;
}

void Name_Commands::Swap(Name_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Name_Commands::InternalSwap(Name_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Name_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_Commands_descriptor_;
  metadata.reflection = Name_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Name::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::NameData >, 11, false >
  Name::component_extension(kComponentExtensionFieldNumber, ::schema::improbable::player::NameData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Name::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::Name_Events >, 11, false >
  Name::event_extension(kEventExtensionFieldNumber, ::schema::improbable::player::Name_Events::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Name::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::Name_Commands >, 11, false >
  Name::command_extension(kCommandExtensionFieldNumber, ::schema::improbable::player::Name_Commands::default_instance());
Name::Name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.Name)
}

void Name::InitAsDefaultInstance() {
}

Name::Name(const Name& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.Name)
}

void Name::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_descriptor_;
}

const Name& Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fname_2eproto();
  return *default_instance_;
}

Name* Name::default_instance_ = NULL;

Name* Name::New(::google::protobuf::Arena* arena) const {
  Name* n = new Name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.Name)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.Name)
  return false;
#undef DO_
}

void Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.Name)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.Name)
}

::google::protobuf::uint8* Name::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.Name)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.Name)
  return target;
}

int Name::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.Name)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Name* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Name>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.Name)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Name::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {

  return true;
}

void Name::Swap(Name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Name::InternalSwap(Name* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_descriptor_;
  metadata.reflection = Name_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Name_Events

// -------------------------------------------------------------------

// Name_Commands

// -------------------------------------------------------------------

// Name

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
