// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/player/name.schema
#include <improbable/player/name.h>
#include <improbable/entity_state.pb.h>
#include <improbable/player/name.pb.h>

namespace improbable {
namespace player {

// Implementation of NameData.
//----------------------------------------------------------------

NameData::NameData(const std::string& entity_name)
: _entity_name{entity_name} {}

bool NameData::operator==(const NameData& value) const {
  return
      _entity_name == value._entity_name;
}

bool NameData::operator!=(const NameData& value) const {
  return !operator==(value);
}

const std::string& NameData::entity_name() const {
  return _entity_name;
}

std::string& NameData::entity_name() {
  return _entity_name;
}

NameData& NameData::set_entity_name(const std::string& value) {
  _entity_name = value;
  return *this;
}

// Implementation of Name.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId Name::ComponentId;

bool Name::Update::operator==(const Name::Update& value) const {
  return
      _entity_name == value._entity_name;
}

bool Name::Update::operator!=(const Name::Update& value) const {
  return !operator==(value);
}

Name::Update Name::Update::FromInitialData(const ::improbable::player::NameData& data) {
  Name::Update update;
  update._entity_name.emplace(data.entity_name());
  return update;
}

::improbable::player::NameData Name::Update::ToInitialData() const {
  return ::improbable::player::NameData(*_entity_name);
}

void Name::Update::ApplyTo(::improbable::player::NameData& data) const {
  if (_entity_name) {
    data.set_entity_name(*_entity_name);
  }
}

const ::worker::Option< std::string >& Name::Update::entity_name() const {
  return _entity_name;
}

::worker::Option< std::string >& Name::Update::entity_name() {
  return _entity_name;
}

Name::Update& Name::Update::set_entity_name(const std::string& value) {
  _entity_name.emplace(value); return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_NameData(
    const ::improbable::player::NameData& data,
    ::schema::improbable::player::NameData& proto) {
  proto.set_field1_entity_name(data.entity_name());
}

::improbable::player::NameData Deserialize_NameData(
    const ::schema::improbable::player::NameData& proto) {
  ::improbable::player::NameData result{
      proto.field1_entity_name()};
  return result;
}

namespace {

void VtableBufferFree_Name(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_Name(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::player::Name::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_Name* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_Name(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    return new ::improbable::player::Name::Update(*static_cast<const ::improbable::player::Name::Update*>(object));
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    return new GenericCommandObject_Name(
        *static_cast<const GenericCommandObject_Name*>(object));
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_Name(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::player::Name::Update;
    auto client_object = static_cast< ::improbable::player::Name::Update* >(*object);
    {
      const auto& proto = proto_wrapper.entity_state().GetExtension(::schema::improbable::player::Name::component_extension);

      std::set<std::uint32_t> fields_to_clear{proto_wrapper.fields_to_clear().begin(),
                                              proto_wrapper.fields_to_clear().end()};
      if (proto.has_field1_entity_name()) {
        client_object->entity_name().emplace(proto.field1_entity_name());
      }
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::player::Name::Update;
    auto client_object = static_cast< ::improbable::player::Name::Update* >(*object);
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::player::Name::component_extension);

    client_object->entity_name().emplace(proto.field1_entity_name());
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  }
  return true;
}

void VtableSerialize_Name(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::Name::Update*>(object);
    {
      auto& proto = *proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::player::Name::component_extension);
      if (data.entity_name()) {
        proto.set_field1_entity_name(*data.entity_name());
      }
    }
    {
      proto_wrapper.mutable_entity_event()->MutableExtension(::schema::improbable::player::Name::event_extension);
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::player::Name::Update*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::player::Name::component_extension);

    proto.set_field1_entity_name(*data.entity_name());

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::player::Name::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::player::Name::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_Name() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      1001,
      &detail::VtableBufferFree_Name,
      &detail::VtableFree_Name,
      &detail::VtableCopy_Name,
      &detail::VtableDeserialize_Name,
      &detail::VtableSerialize_Name,
  };
  return vtable;
}

}  // ::detail

}  // ::player
}  // ::improbable
