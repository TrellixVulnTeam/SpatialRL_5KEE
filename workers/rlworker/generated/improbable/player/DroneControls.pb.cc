// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/player/DroneControls.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/player/DroneControls.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace player {

namespace {

const ::google::protobuf::Descriptor* DroneControlsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneControlsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DroneControls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneControls_reflection_ = NULL;
const ::google::protobuf::Descriptor* DroneControls_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneControls_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* DroneControls_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DroneControls_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto() {
  protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/player/DroneControls.proto");
  GOOGLE_CHECK(file != NULL);
  DroneControlsData_descriptor_ = file->message_type(0);
  static const int DroneControlsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControlsData, field1_force_),
  };
  DroneControlsData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneControlsData_descriptor_,
      DroneControlsData::default_instance_,
      DroneControlsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControlsData, _has_bits_[0]),
      -1,
      -1,
      sizeof(DroneControlsData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControlsData, _internal_metadata_),
      -1);
  DroneControls_descriptor_ = file->message_type(1);
  static const int DroneControls_offsets_[1] = {
  };
  DroneControls_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneControls_descriptor_,
      DroneControls::default_instance_,
      DroneControls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls, _has_bits_[0]),
      -1,
      -1,
      sizeof(DroneControls),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls, _internal_metadata_),
      -1);
  DroneControls_Events_descriptor_ = DroneControls_descriptor_->nested_type(0);
  static const int DroneControls_Events_offsets_[1] = {
  };
  DroneControls_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneControls_Events_descriptor_,
      DroneControls_Events::default_instance_,
      DroneControls_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(DroneControls_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls_Events, _internal_metadata_),
      -1);
  DroneControls_Commands_descriptor_ = DroneControls_descriptor_->nested_type(1);
  static const int DroneControls_Commands_offsets_[1] = {
  };
  DroneControls_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DroneControls_Commands_descriptor_,
      DroneControls_Commands::default_instance_,
      DroneControls_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(DroneControls_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DroneControls_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneControlsData_descriptor_, &DroneControlsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneControls_descriptor_, &DroneControls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneControls_Events_descriptor_, &DroneControls_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DroneControls_Commands_descriptor_, &DroneControls_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto() {
  delete DroneControlsData::default_instance_;
  delete DroneControlsData_reflection_;
  delete DroneControls::default_instance_;
  delete DroneControls_reflection_;
  delete DroneControls_Events::default_instance_;
  delete DroneControls_Events_reflection_;
  delete DroneControls_Commands::default_instance_;
  delete DroneControls_Commands_reflection_;
}

void protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::math::protobuf_AddDesc_improbable_2fmath_2fvector3f_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%improbable/player/DroneControls.proto\022"
    "\030schema.improbable.player\032\035improbable/en"
    "tity_state.proto\032\036improbable/math/vector"
    "3f.proto\"V\n\021DroneControlsData\022A\n\014field1_"
    "force\030\001 \001(\0132 .schema.improbable.math.Vec"
    "tor3fB\t\302\363\030\005force\"\224\003\n\rDroneControls\032\010\n\006Ev"
    "ents\032\n\n\010Commands2i\n\023component_extension\022"
    "\036.schema.improbable.EntityState\030\353\007 \001(\0132+"
    ".schema.improbable.player.DroneControlsD"
    "ata2h\n\017event_extension\022\036.schema.improbab"
    "le.EntityEvent\030\353\007 \001(\0132..schema.improbabl"
    "e.player.DroneControls.Events2n\n\021command"
    "_extension\022 .schema.improbable.EntityCom"
    "mand\030\353\007 \001(\01320.schema.improbable.player.D"
    "roneControls.Commands:(\302\363\030$\n\037improbable."
    "player.DroneControls\020\353\007B\031B\027DroneControls"
    "OuterClass", 650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/player/DroneControls.proto", &protobuf_RegisterTypes);
  DroneControlsData::default_instance_ = new DroneControlsData();
  DroneControls::default_instance_ = new DroneControls();
  DroneControls_Events::default_instance_ = new DroneControls_Events();
  DroneControls_Commands::default_instance_ = new DroneControls_Commands();
  DroneControlsData::default_instance_->InitAsDefaultInstance();
  DroneControls::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityState::default_instance(),
    1003, 11, false, false,
    &::schema::improbable::player::DroneControlsData::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityEvent::default_instance(),
    1003, 11, false, false,
    &::schema::improbable::player::DroneControls_Events::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityCommand::default_instance(),
    1003, 11, false, false,
    &::schema::improbable::player::DroneControls_Commands::default_instance());
  DroneControls_Events::default_instance_->InitAsDefaultInstance();
  DroneControls_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fplayer_2fDroneControls_2eproto {
  StaticDescriptorInitializer_improbable_2fplayer_2fDroneControls_2eproto() {
    protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  }
} static_descriptor_initializer_improbable_2fplayer_2fDroneControls_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneControlsData::kField1ForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneControlsData::DroneControlsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.DroneControlsData)
}

void DroneControlsData::InitAsDefaultInstance() {
  field1_force_ = const_cast< ::schema::improbable::math::Vector3f*>(&::schema::improbable::math::Vector3f::default_instance());
}

DroneControlsData::DroneControlsData(const DroneControlsData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.DroneControlsData)
}

void DroneControlsData::SharedCtor() {
  _cached_size_ = 0;
  field1_force_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DroneControlsData::~DroneControlsData() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.DroneControlsData)
  SharedDtor();
}

void DroneControlsData::SharedDtor() {
  if (this != default_instance_) {
    delete field1_force_;
  }
}

void DroneControlsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneControlsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneControlsData_descriptor_;
}

const DroneControlsData& DroneControlsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  return *default_instance_;
}

DroneControlsData* DroneControlsData::default_instance_ = NULL;

DroneControlsData* DroneControlsData::New(::google::protobuf::Arena* arena) const {
  DroneControlsData* n = new DroneControlsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneControlsData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.DroneControlsData)
  if (has_field1_force()) {
    if (field1_force_ != NULL) field1_force_->::schema::improbable::math::Vector3f::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DroneControlsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.DroneControlsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.math.Vector3f field1_force = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1_force()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.DroneControlsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.DroneControlsData)
  return false;
#undef DO_
}

void DroneControlsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.DroneControlsData)
  // optional .schema.improbable.math.Vector3f field1_force = 1;
  if (has_field1_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field1_force_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.DroneControlsData)
}

::google::protobuf::uint8* DroneControlsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.DroneControlsData)
  // optional .schema.improbable.math.Vector3f field1_force = 1;
  if (has_field1_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field1_force_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.DroneControlsData)
  return target;
}

int DroneControlsData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.DroneControlsData)
  int total_size = 0;

  // optional .schema.improbable.math.Vector3f field1_force = 1;
  if (has_field1_force()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field1_force_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneControlsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.DroneControlsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneControlsData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneControlsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.DroneControlsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.DroneControlsData)
    MergeFrom(*source);
  }
}

void DroneControlsData::MergeFrom(const DroneControlsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.DroneControlsData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_force()) {
      mutable_field1_force()->::schema::improbable::math::Vector3f::MergeFrom(from.field1_force());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DroneControlsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.DroneControlsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneControlsData::CopyFrom(const DroneControlsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.DroneControlsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneControlsData::IsInitialized() const {

  return true;
}

void DroneControlsData::Swap(DroneControlsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneControlsData::InternalSwap(DroneControlsData* other) {
  std::swap(field1_force_, other->field1_force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneControlsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneControlsData_descriptor_;
  metadata.reflection = DroneControlsData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneControlsData

// optional .schema.improbable.math.Vector3f field1_force = 1;
bool DroneControlsData::has_field1_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DroneControlsData::set_has_field1_force() {
  _has_bits_[0] |= 0x00000001u;
}
void DroneControlsData::clear_has_field1_force() {
  _has_bits_[0] &= ~0x00000001u;
}
void DroneControlsData::clear_field1_force() {
  if (field1_force_ != NULL) field1_force_->::schema::improbable::math::Vector3f::Clear();
  clear_has_field1_force();
}
const ::schema::improbable::math::Vector3f& DroneControlsData::field1_force() const {
  // @@protoc_insertion_point(field_get:schema.improbable.player.DroneControlsData.field1_force)
  return field1_force_ != NULL ? *field1_force_ : *default_instance_->field1_force_;
}
::schema::improbable::math::Vector3f* DroneControlsData::mutable_field1_force() {
  set_has_field1_force();
  if (field1_force_ == NULL) {
    field1_force_ = new ::schema::improbable::math::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.player.DroneControlsData.field1_force)
  return field1_force_;
}
::schema::improbable::math::Vector3f* DroneControlsData::release_field1_force() {
  // @@protoc_insertion_point(field_release:schema.improbable.player.DroneControlsData.field1_force)
  clear_has_field1_force();
  ::schema::improbable::math::Vector3f* temp = field1_force_;
  field1_force_ = NULL;
  return temp;
}
void DroneControlsData::set_allocated_field1_force(::schema::improbable::math::Vector3f* field1_force) {
  delete field1_force_;
  field1_force_ = field1_force;
  if (field1_force) {
    set_has_field1_force();
  } else {
    clear_has_field1_force();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.player.DroneControlsData.field1_force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneControls_Events::DroneControls_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.DroneControls.Events)
}

void DroneControls_Events::InitAsDefaultInstance() {
}

DroneControls_Events::DroneControls_Events(const DroneControls_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.DroneControls.Events)
}

void DroneControls_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DroneControls_Events::~DroneControls_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.DroneControls.Events)
  SharedDtor();
}

void DroneControls_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DroneControls_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneControls_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneControls_Events_descriptor_;
}

const DroneControls_Events& DroneControls_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  return *default_instance_;
}

DroneControls_Events* DroneControls_Events::default_instance_ = NULL;

DroneControls_Events* DroneControls_Events::New(::google::protobuf::Arena* arena) const {
  DroneControls_Events* n = new DroneControls_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneControls_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.DroneControls.Events)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DroneControls_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.DroneControls.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.DroneControls.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.DroneControls.Events)
  return false;
#undef DO_
}

void DroneControls_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.DroneControls.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.DroneControls.Events)
}

::google::protobuf::uint8* DroneControls_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.DroneControls.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.DroneControls.Events)
  return target;
}

int DroneControls_Events::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.DroneControls.Events)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneControls_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.DroneControls.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneControls_Events* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneControls_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.DroneControls.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.DroneControls.Events)
    MergeFrom(*source);
  }
}

void DroneControls_Events::MergeFrom(const DroneControls_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.DroneControls.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DroneControls_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.DroneControls.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneControls_Events::CopyFrom(const DroneControls_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.DroneControls.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneControls_Events::IsInitialized() const {

  return true;
}

void DroneControls_Events::Swap(DroneControls_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneControls_Events::InternalSwap(DroneControls_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneControls_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneControls_Events_descriptor_;
  metadata.reflection = DroneControls_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DroneControls_Commands::DroneControls_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.DroneControls.Commands)
}

void DroneControls_Commands::InitAsDefaultInstance() {
}

DroneControls_Commands::DroneControls_Commands(const DroneControls_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.DroneControls.Commands)
}

void DroneControls_Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DroneControls_Commands::~DroneControls_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.DroneControls.Commands)
  SharedDtor();
}

void DroneControls_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DroneControls_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneControls_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneControls_Commands_descriptor_;
}

const DroneControls_Commands& DroneControls_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  return *default_instance_;
}

DroneControls_Commands* DroneControls_Commands::default_instance_ = NULL;

DroneControls_Commands* DroneControls_Commands::New(::google::protobuf::Arena* arena) const {
  DroneControls_Commands* n = new DroneControls_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneControls_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.DroneControls.Commands)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DroneControls_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.DroneControls.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.DroneControls.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.DroneControls.Commands)
  return false;
#undef DO_
}

void DroneControls_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.DroneControls.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.DroneControls.Commands)
}

::google::protobuf::uint8* DroneControls_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.DroneControls.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.DroneControls.Commands)
  return target;
}

int DroneControls_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.DroneControls.Commands)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneControls_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.DroneControls.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneControls_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneControls_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.DroneControls.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.DroneControls.Commands)
    MergeFrom(*source);
  }
}

void DroneControls_Commands::MergeFrom(const DroneControls_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.DroneControls.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DroneControls_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.DroneControls.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneControls_Commands::CopyFrom(const DroneControls_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.DroneControls.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneControls_Commands::IsInitialized() const {

  return true;
}

void DroneControls_Commands::Swap(DroneControls_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneControls_Commands::InternalSwap(DroneControls_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneControls_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneControls_Commands_descriptor_;
  metadata.reflection = DroneControls_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneControls::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControlsData >, 11, false >
  DroneControls::component_extension(kComponentExtensionFieldNumber, ::schema::improbable::player::DroneControlsData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneControls::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControls_Events >, 11, false >
  DroneControls::event_extension(kEventExtensionFieldNumber, ::schema::improbable::player::DroneControls_Events::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DroneControls::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControls_Commands >, 11, false >
  DroneControls::command_extension(kCommandExtensionFieldNumber, ::schema::improbable::player::DroneControls_Commands::default_instance());
DroneControls::DroneControls()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.player.DroneControls)
}

void DroneControls::InitAsDefaultInstance() {
}

DroneControls::DroneControls(const DroneControls& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.player.DroneControls)
}

void DroneControls::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DroneControls::~DroneControls() {
  // @@protoc_insertion_point(destructor:schema.improbable.player.DroneControls)
  SharedDtor();
}

void DroneControls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DroneControls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DroneControls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DroneControls_descriptor_;
}

const DroneControls& DroneControls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  return *default_instance_;
}

DroneControls* DroneControls::default_instance_ = NULL;

DroneControls* DroneControls::New(::google::protobuf::Arena* arena) const {
  DroneControls* n = new DroneControls;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DroneControls::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.player.DroneControls)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DroneControls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.player.DroneControls)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.player.DroneControls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.player.DroneControls)
  return false;
#undef DO_
}

void DroneControls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.player.DroneControls)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.player.DroneControls)
}

::google::protobuf::uint8* DroneControls::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.player.DroneControls)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.player.DroneControls)
  return target;
}

int DroneControls::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.player.DroneControls)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DroneControls::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.player.DroneControls)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DroneControls* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DroneControls>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.player.DroneControls)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.player.DroneControls)
    MergeFrom(*source);
  }
}

void DroneControls::MergeFrom(const DroneControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.player.DroneControls)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DroneControls::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.player.DroneControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneControls::CopyFrom(const DroneControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.player.DroneControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneControls::IsInitialized() const {

  return true;
}

void DroneControls::Swap(DroneControls* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DroneControls::InternalSwap(DroneControls* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DroneControls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DroneControls_descriptor_;
  metadata.reflection = DroneControls_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneControls_Events

// -------------------------------------------------------------------

// DroneControls_Commands

// -------------------------------------------------------------------

// DroneControls

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
