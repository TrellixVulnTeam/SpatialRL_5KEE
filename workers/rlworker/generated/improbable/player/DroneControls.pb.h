// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/player/DroneControls.proto

#ifndef PROTOBUF_improbable_2fplayer_2fDroneControls_2eproto__INCLUDED
#define PROTOBUF_improbable_2fplayer_2fDroneControls_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "improbable/entity_state.pb.h"
#include "improbable/math/vector3f.pb.h"
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace player {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto();
void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto();

class DroneControls;
class DroneControlsData;
class DroneControls_Commands;
class DroneControls_Events;

// ===================================================================

class DroneControlsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.player.DroneControlsData) */ {
 public:
  DroneControlsData();
  virtual ~DroneControlsData();

  DroneControlsData(const DroneControlsData& from);

  inline DroneControlsData& operator=(const DroneControlsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneControlsData& default_instance();

  void Swap(DroneControlsData* other);

  // implements Message ----------------------------------------------

  inline DroneControlsData* New() const { return New(NULL); }

  DroneControlsData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneControlsData& from);
  void MergeFrom(const DroneControlsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneControlsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .schema.improbable.math.Vector3f field1_force = 1;
  bool has_field1_force() const;
  void clear_field1_force();
  static const int kField1ForceFieldNumber = 1;
  const ::schema::improbable::math::Vector3f& field1_force() const;
  ::schema::improbable::math::Vector3f* mutable_field1_force();
  ::schema::improbable::math::Vector3f* release_field1_force();
  void set_allocated_field1_force(::schema::improbable::math::Vector3f* field1_force);

  // @@protoc_insertion_point(class_scope:schema.improbable.player.DroneControlsData)
 private:
  inline void set_has_field1_force();
  inline void clear_has_field1_force();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::schema::improbable::math::Vector3f* field1_force_;
  friend void  protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto();

  void InitAsDefaultInstance();
  static DroneControlsData* default_instance_;
};
// -------------------------------------------------------------------

class DroneControls_Events : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.player.DroneControls.Events) */ {
 public:
  DroneControls_Events();
  virtual ~DroneControls_Events();

  DroneControls_Events(const DroneControls_Events& from);

  inline DroneControls_Events& operator=(const DroneControls_Events& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneControls_Events& default_instance();

  void Swap(DroneControls_Events* other);

  // implements Message ----------------------------------------------

  inline DroneControls_Events* New() const { return New(NULL); }

  DroneControls_Events* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneControls_Events& from);
  void MergeFrom(const DroneControls_Events& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneControls_Events* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:schema.improbable.player.DroneControls.Events)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto();

  void InitAsDefaultInstance();
  static DroneControls_Events* default_instance_;
};
// -------------------------------------------------------------------

class DroneControls_Commands : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.player.DroneControls.Commands) */ {
 public:
  DroneControls_Commands();
  virtual ~DroneControls_Commands();

  DroneControls_Commands(const DroneControls_Commands& from);

  inline DroneControls_Commands& operator=(const DroneControls_Commands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneControls_Commands& default_instance();

  void Swap(DroneControls_Commands* other);

  // implements Message ----------------------------------------------

  inline DroneControls_Commands* New() const { return New(NULL); }

  DroneControls_Commands* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneControls_Commands& from);
  void MergeFrom(const DroneControls_Commands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneControls_Commands* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:schema.improbable.player.DroneControls.Commands)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto();

  void InitAsDefaultInstance();
  static DroneControls_Commands* default_instance_;
};
// -------------------------------------------------------------------

class DroneControls : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.player.DroneControls) */ {
 public:
  DroneControls();
  virtual ~DroneControls();

  DroneControls(const DroneControls& from);

  inline DroneControls& operator=(const DroneControls& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DroneControls& default_instance();

  void Swap(DroneControls* other);

  // implements Message ----------------------------------------------

  inline DroneControls* New() const { return New(NULL); }

  DroneControls* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DroneControls& from);
  void MergeFrom(const DroneControls& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DroneControls* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DroneControls_Events Events;
  typedef DroneControls_Commands Commands;

  // accessors -------------------------------------------------------

  static const int kComponentExtensionFieldNumber = 1003;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControlsData >, 11, false >
    component_extension;
  static const int kEventExtensionFieldNumber = 1003;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControls_Events >, 11, false >
    event_extension;
  static const int kCommandExtensionFieldNumber = 1003;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::player::DroneControls_Commands >, 11, false >
    command_extension;
  // @@protoc_insertion_point(class_scope:schema.improbable.player.DroneControls)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_AssignDesc_improbable_2fplayer_2fDroneControls_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fplayer_2fDroneControls_2eproto();

  void InitAsDefaultInstance();
  static DroneControls* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DroneControlsData

// optional .schema.improbable.math.Vector3f field1_force = 1;
inline bool DroneControlsData::has_field1_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DroneControlsData::set_has_field1_force() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DroneControlsData::clear_has_field1_force() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DroneControlsData::clear_field1_force() {
  if (field1_force_ != NULL) field1_force_->::schema::improbable::math::Vector3f::Clear();
  clear_has_field1_force();
}
inline const ::schema::improbable::math::Vector3f& DroneControlsData::field1_force() const {
  // @@protoc_insertion_point(field_get:schema.improbable.player.DroneControlsData.field1_force)
  return field1_force_ != NULL ? *field1_force_ : *default_instance_->field1_force_;
}
inline ::schema::improbable::math::Vector3f* DroneControlsData::mutable_field1_force() {
  set_has_field1_force();
  if (field1_force_ == NULL) {
    field1_force_ = new ::schema::improbable::math::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.player.DroneControlsData.field1_force)
  return field1_force_;
}
inline ::schema::improbable::math::Vector3f* DroneControlsData::release_field1_force() {
  // @@protoc_insertion_point(field_release:schema.improbable.player.DroneControlsData.field1_force)
  clear_has_field1_force();
  ::schema::improbable::math::Vector3f* temp = field1_force_;
  field1_force_ = NULL;
  return temp;
}
inline void DroneControlsData::set_allocated_field1_force(::schema::improbable::math::Vector3f* field1_force) {
  delete field1_force_;
  field1_force_ = field1_force;
  if (field1_force) {
    set_has_field1_force();
  } else {
    clear_has_field1_force();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.player.DroneControlsData.field1_force)
}

// -------------------------------------------------------------------

// DroneControls_Events

// -------------------------------------------------------------------

// DroneControls_Commands

// -------------------------------------------------------------------

// DroneControls

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_improbable_2fplayer_2fDroneControls_2eproto__INCLUDED
