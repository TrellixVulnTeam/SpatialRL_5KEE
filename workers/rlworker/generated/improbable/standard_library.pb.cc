// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/standard_library.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/standard_library.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {

namespace {

const ::google::protobuf::Descriptor* WorkerClaimAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerClaimAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerClaim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerClaim_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerPredicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerPredicate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComponentAcl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentAcl_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComponentAcl_Field1WriteEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EntityAclData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityAclData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityAcl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityAcl_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityAcl_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityAcl_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityAcl_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityAcl_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fstandard_5flibrary_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fstandard_5flibrary_2eproto() {
  protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/standard_library.proto");
  GOOGLE_CHECK(file != NULL);
  WorkerClaimAtom_descriptor_ = file->message_type(0);
  static const int WorkerClaimAtom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaimAtom, field1_name_),
  };
  WorkerClaimAtom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkerClaimAtom_descriptor_,
      WorkerClaimAtom::default_instance_,
      WorkerClaimAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaimAtom, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkerClaimAtom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaimAtom, _internal_metadata_),
      -1);
  WorkerClaim_descriptor_ = file->message_type(1);
  static const int WorkerClaim_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaim, field1_atom_),
  };
  WorkerClaim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkerClaim_descriptor_,
      WorkerClaim::default_instance_,
      WorkerClaim_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaim, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkerClaim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerClaim, _internal_metadata_),
      -1);
  WorkerPredicate_descriptor_ = file->message_type(2);
  static const int WorkerPredicate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerPredicate, field1_claim_),
  };
  WorkerPredicate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkerPredicate_descriptor_,
      WorkerPredicate::default_instance_,
      WorkerPredicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerPredicate, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkerPredicate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerPredicate, _internal_metadata_),
      -1);
  ComponentAcl_descriptor_ = file->message_type(3);
  static const int ComponentAcl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAcl, field1_write_),
  };
  ComponentAcl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComponentAcl_descriptor_,
      ComponentAcl::default_instance_,
      ComponentAcl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAcl, _has_bits_[0]),
      -1,
      -1,
      sizeof(ComponentAcl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentAcl, _internal_metadata_),
      -1);
  ComponentAcl_Field1WriteEntry_descriptor_ = ComponentAcl_descriptor_->nested_type(0);
  EntityAclData_descriptor_ = file->message_type(4);
  static const int EntityAclData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAclData, field1_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAclData, field2_component_acl_),
  };
  EntityAclData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityAclData_descriptor_,
      EntityAclData::default_instance_,
      EntityAclData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAclData, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityAclData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAclData, _internal_metadata_),
      -1);
  EntityAcl_descriptor_ = file->message_type(5);
  static const int EntityAcl_offsets_[1] = {
  };
  EntityAcl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityAcl_descriptor_,
      EntityAcl::default_instance_,
      EntityAcl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityAcl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl, _internal_metadata_),
      -1);
  EntityAcl_Events_descriptor_ = EntityAcl_descriptor_->nested_type(0);
  static const int EntityAcl_Events_offsets_[1] = {
  };
  EntityAcl_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityAcl_Events_descriptor_,
      EntityAcl_Events::default_instance_,
      EntityAcl_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityAcl_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl_Events, _internal_metadata_),
      -1);
  EntityAcl_Commands_descriptor_ = EntityAcl_descriptor_->nested_type(1);
  static const int EntityAcl_Commands_offsets_[1] = {
  };
  EntityAcl_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityAcl_Commands_descriptor_,
      EntityAcl_Commands::default_instance_,
      EntityAcl_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityAcl_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAcl_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fstandard_5flibrary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkerClaimAtom_descriptor_, &WorkerClaimAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkerClaim_descriptor_, &WorkerClaim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkerPredicate_descriptor_, &WorkerPredicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComponentAcl_descriptor_, &ComponentAcl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ComponentAcl_Field1WriteEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::schema::improbable::WorkerPredicate,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ComponentAcl_Field1WriteEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityAclData_descriptor_, &EntityAclData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityAcl_descriptor_, &EntityAcl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityAcl_Events_descriptor_, &EntityAcl_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityAcl_Commands_descriptor_, &EntityAcl_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fstandard_5flibrary_2eproto() {
  delete WorkerClaimAtom::default_instance_;
  delete WorkerClaimAtom_reflection_;
  delete WorkerClaim::default_instance_;
  delete WorkerClaim_reflection_;
  delete WorkerPredicate::default_instance_;
  delete WorkerPredicate_reflection_;
  delete ComponentAcl::default_instance_;
  delete ComponentAcl_reflection_;
  delete EntityAclData::default_instance_;
  delete EntityAclData_reflection_;
  delete EntityAcl::default_instance_;
  delete EntityAcl_reflection_;
  delete EntityAcl_Events::default_instance_;
  delete EntityAcl_Events_reflection_;
  delete EntityAcl_Commands::default_instance_;
  delete EntityAcl_Commands_reflection_;
}

void protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!improbable/standard_library.proto\022\021sch"
    "ema.improbable\032\035improbable/entity_state."
    "proto\"4\n\017WorkerClaimAtom\022!\n\013field1_name\030"
    "\001 \001(\tB\014\302\363\030\004name\340\363\030\001\"P\n\013WorkerClaim\022A\n\013fi"
    "eld1_atom\030\001 \003(\0132\".schema.improbable.Work"
    "erClaimAtomB\010\302\363\030\004atom\"R\n\017WorkerPredicate"
    "\022\?\n\014field1_claim\030\001 \003(\0132\036.schema.improbab"
    "le.WorkerClaimB\t\302\363\030\005claim\"\271\001\n\014ComponentA"
    "cl\022Q\n\014field1_write\030\001 \003(\01320.schema.improb"
    "able.ComponentAcl.Field1WriteEntryB\t\302\363\030\005"
    "write\032V\n\020Field1WriteEntry\022\013\n\003key\030\001 \001(\r\0221"
    "\n\005value\030\002 \001(\0132\".schema.improbable.Worker"
    "Predicate:\0028\001\"\254\001\n\rEntityAclData\022E\n\013field"
    "1_read\030\001 \001(\0132\".schema.improbable.WorkerP"
    "redicateB\014\302\363\030\004read\340\363\030\001\022T\n\024field2_compone"
    "nt_acl\030\002 \001(\0132\037.schema.improbable.Compone"
    "ntAclB\025\302\363\030\rcomponent_acl\340\363\030\001\"\340\002\n\tEntityA"
    "cl\032\010\n\006Events\032\n\n\010Commands2]\n\023component_ex"
    "tension\022\036.schema.improbable.EntityState\030"
    "2 \001(\0132 .schema.improbable.EntityAclData2"
    "\\\n\017event_extension\022\036.schema.improbable.E"
    "ntityEvent\0302 \001(\0132#.schema.improbable.Ent"
    "ityAcl.Events2b\n\021command_extension\022 .sch"
    "ema.improbable.EntityCommand\0302 \001(\0132%.sch"
    "ema.improbable.EntityAcl.Commands:\034\302\363\030\030\n"
    "\024improbable.EntityAcl\0202B\033B\031StandardLibra"
    "ryOuterClass", 1052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/standard_library.proto", &protobuf_RegisterTypes);
  WorkerClaimAtom::default_instance_ = new WorkerClaimAtom();
  WorkerClaim::default_instance_ = new WorkerClaim();
  WorkerPredicate::default_instance_ = new WorkerPredicate();
  ComponentAcl::default_instance_ = new ComponentAcl();
  EntityAclData::default_instance_ = new EntityAclData();
  EntityAcl::default_instance_ = new EntityAcl();
  EntityAcl_Events::default_instance_ = new EntityAcl_Events();
  EntityAcl_Commands::default_instance_ = new EntityAcl_Commands();
  WorkerClaimAtom::default_instance_->InitAsDefaultInstance();
  WorkerClaim::default_instance_->InitAsDefaultInstance();
  WorkerPredicate::default_instance_->InitAsDefaultInstance();
  ComponentAcl::default_instance_->InitAsDefaultInstance();
  EntityAclData::default_instance_->InitAsDefaultInstance();
  EntityAcl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityState::default_instance(),
    50, 11, false, false,
    &::schema::improbable::EntityAclData::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityEvent::default_instance(),
    50, 11, false, false,
    &::schema::improbable::EntityAcl_Events::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityCommand::default_instance(),
    50, 11, false, false,
    &::schema::improbable::EntityAcl_Commands::default_instance());
  EntityAcl_Events::default_instance_->InitAsDefaultInstance();
  EntityAcl_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fstandard_5flibrary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fstandard_5flibrary_2eproto {
  StaticDescriptorInitializer_improbable_2fstandard_5flibrary_2eproto() {
    protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  }
} static_descriptor_initializer_improbable_2fstandard_5flibrary_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerClaimAtom::kField1NameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerClaimAtom::WorkerClaimAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.WorkerClaimAtom)
}

void WorkerClaimAtom::InitAsDefaultInstance() {
}

WorkerClaimAtom::WorkerClaimAtom(const WorkerClaimAtom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.WorkerClaimAtom)
}

void WorkerClaimAtom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerClaimAtom::~WorkerClaimAtom() {
  // @@protoc_insertion_point(destructor:schema.improbable.WorkerClaimAtom)
  SharedDtor();
}

void WorkerClaimAtom::SharedDtor() {
  field1_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WorkerClaimAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerClaimAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerClaimAtom_descriptor_;
}

const WorkerClaimAtom& WorkerClaimAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

WorkerClaimAtom* WorkerClaimAtom::default_instance_ = NULL;

WorkerClaimAtom* WorkerClaimAtom::New(::google::protobuf::Arena* arena) const {
  WorkerClaimAtom* n = new WorkerClaimAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkerClaimAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.WorkerClaimAtom)
  if (has_field1_name()) {
    field1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkerClaimAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.WorkerClaimAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string field1_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field1_name().data(), this->field1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "schema.improbable.WorkerClaimAtom.field1_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.WorkerClaimAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.WorkerClaimAtom)
  return false;
#undef DO_
}

void WorkerClaimAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.WorkerClaimAtom)
  // optional string field1_name = 1;
  if (has_field1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field1_name().data(), this->field1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema.improbable.WorkerClaimAtom.field1_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field1_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.WorkerClaimAtom)
}

::google::protobuf::uint8* WorkerClaimAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.WorkerClaimAtom)
  // optional string field1_name = 1;
  if (has_field1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field1_name().data(), this->field1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "schema.improbable.WorkerClaimAtom.field1_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field1_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.WorkerClaimAtom)
  return target;
}

int WorkerClaimAtom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.WorkerClaimAtom)
  int total_size = 0;

  // optional string field1_name = 1;
  if (has_field1_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field1_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerClaimAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.WorkerClaimAtom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorkerClaimAtom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkerClaimAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.WorkerClaimAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.WorkerClaimAtom)
    MergeFrom(*source);
  }
}

void WorkerClaimAtom::MergeFrom(const WorkerClaimAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.WorkerClaimAtom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_name()) {
      set_has_field1_name();
      field1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field1_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkerClaimAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.WorkerClaimAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerClaimAtom::CopyFrom(const WorkerClaimAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.WorkerClaimAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerClaimAtom::IsInitialized() const {

  return true;
}

void WorkerClaimAtom::Swap(WorkerClaimAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerClaimAtom::InternalSwap(WorkerClaimAtom* other) {
  field1_name_.Swap(&other->field1_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkerClaimAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerClaimAtom_descriptor_;
  metadata.reflection = WorkerClaimAtom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkerClaimAtom

// optional string field1_name = 1;
bool WorkerClaimAtom::has_field1_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkerClaimAtom::set_has_field1_name() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkerClaimAtom::clear_has_field1_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkerClaimAtom::clear_field1_name() {
  field1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1_name();
}
 const ::std::string& WorkerClaimAtom::field1_name() const {
  // @@protoc_insertion_point(field_get:schema.improbable.WorkerClaimAtom.field1_name)
  return field1_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkerClaimAtom::set_field1_name(const ::std::string& value) {
  set_has_field1_name();
  field1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schema.improbable.WorkerClaimAtom.field1_name)
}
 void WorkerClaimAtom::set_field1_name(const char* value) {
  set_has_field1_name();
  field1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schema.improbable.WorkerClaimAtom.field1_name)
}
 void WorkerClaimAtom::set_field1_name(const char* value, size_t size) {
  set_has_field1_name();
  field1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schema.improbable.WorkerClaimAtom.field1_name)
}
 ::std::string* WorkerClaimAtom::mutable_field1_name() {
  set_has_field1_name();
  // @@protoc_insertion_point(field_mutable:schema.improbable.WorkerClaimAtom.field1_name)
  return field1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkerClaimAtom::release_field1_name() {
  // @@protoc_insertion_point(field_release:schema.improbable.WorkerClaimAtom.field1_name)
  clear_has_field1_name();
  return field1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkerClaimAtom::set_allocated_field1_name(::std::string* field1_name) {
  if (field1_name != NULL) {
    set_has_field1_name();
  } else {
    clear_has_field1_name();
  }
  field1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1_name);
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.WorkerClaimAtom.field1_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerClaim::kField1AtomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerClaim::WorkerClaim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.WorkerClaim)
}

void WorkerClaim::InitAsDefaultInstance() {
}

WorkerClaim::WorkerClaim(const WorkerClaim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.WorkerClaim)
}

void WorkerClaim::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerClaim::~WorkerClaim() {
  // @@protoc_insertion_point(destructor:schema.improbable.WorkerClaim)
  SharedDtor();
}

void WorkerClaim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerClaim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerClaim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerClaim_descriptor_;
}

const WorkerClaim& WorkerClaim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

WorkerClaim* WorkerClaim::default_instance_ = NULL;

WorkerClaim* WorkerClaim::New(::google::protobuf::Arena* arena) const {
  WorkerClaim* n = new WorkerClaim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkerClaim::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.WorkerClaim)
  field1_atom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkerClaim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.WorkerClaim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.improbable.WorkerClaimAtom field1_atom = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field1_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field1_atom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field1_atom;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.WorkerClaim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.WorkerClaim)
  return false;
#undef DO_
}

void WorkerClaim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.WorkerClaim)
  // repeated .schema.improbable.WorkerClaimAtom field1_atom = 1;
  for (unsigned int i = 0, n = this->field1_atom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field1_atom(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.WorkerClaim)
}

::google::protobuf::uint8* WorkerClaim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.WorkerClaim)
  // repeated .schema.improbable.WorkerClaimAtom field1_atom = 1;
  for (unsigned int i = 0, n = this->field1_atom_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field1_atom(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.WorkerClaim)
  return target;
}

int WorkerClaim::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.WorkerClaim)
  int total_size = 0;

  // repeated .schema.improbable.WorkerClaimAtom field1_atom = 1;
  total_size += 1 * this->field1_atom_size();
  for (int i = 0; i < this->field1_atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field1_atom(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerClaim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.WorkerClaim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorkerClaim* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkerClaim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.WorkerClaim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.WorkerClaim)
    MergeFrom(*source);
  }
}

void WorkerClaim::MergeFrom(const WorkerClaim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.WorkerClaim)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  field1_atom_.MergeFrom(from.field1_atom_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkerClaim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.WorkerClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerClaim::CopyFrom(const WorkerClaim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.WorkerClaim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerClaim::IsInitialized() const {

  return true;
}

void WorkerClaim::Swap(WorkerClaim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerClaim::InternalSwap(WorkerClaim* other) {
  field1_atom_.UnsafeArenaSwap(&other->field1_atom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkerClaim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerClaim_descriptor_;
  metadata.reflection = WorkerClaim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkerClaim

// repeated .schema.improbable.WorkerClaimAtom field1_atom = 1;
int WorkerClaim::field1_atom_size() const {
  return field1_atom_.size();
}
void WorkerClaim::clear_field1_atom() {
  field1_atom_.Clear();
}
const ::schema::improbable::WorkerClaimAtom& WorkerClaim::field1_atom(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.WorkerClaim.field1_atom)
  return field1_atom_.Get(index);
}
::schema::improbable::WorkerClaimAtom* WorkerClaim::mutable_field1_atom(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.WorkerClaim.field1_atom)
  return field1_atom_.Mutable(index);
}
::schema::improbable::WorkerClaimAtom* WorkerClaim::add_field1_atom() {
  // @@protoc_insertion_point(field_add:schema.improbable.WorkerClaim.field1_atom)
  return field1_atom_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::WorkerClaimAtom >*
WorkerClaim::mutable_field1_atom() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.WorkerClaim.field1_atom)
  return &field1_atom_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::WorkerClaimAtom >&
WorkerClaim::field1_atom() const {
  // @@protoc_insertion_point(field_list:schema.improbable.WorkerClaim.field1_atom)
  return field1_atom_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerPredicate::kField1ClaimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerPredicate::WorkerPredicate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.WorkerPredicate)
}

void WorkerPredicate::InitAsDefaultInstance() {
}

WorkerPredicate::WorkerPredicate(const WorkerPredicate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.WorkerPredicate)
}

void WorkerPredicate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerPredicate::~WorkerPredicate() {
  // @@protoc_insertion_point(destructor:schema.improbable.WorkerPredicate)
  SharedDtor();
}

void WorkerPredicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerPredicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerPredicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerPredicate_descriptor_;
}

const WorkerPredicate& WorkerPredicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

WorkerPredicate* WorkerPredicate::default_instance_ = NULL;

WorkerPredicate* WorkerPredicate::New(::google::protobuf::Arena* arena) const {
  WorkerPredicate* n = new WorkerPredicate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkerPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.WorkerPredicate)
  field1_claim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkerPredicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.WorkerPredicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.improbable.WorkerClaim field1_claim = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field1_claim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field1_claim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field1_claim;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.WorkerPredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.WorkerPredicate)
  return false;
#undef DO_
}

void WorkerPredicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.WorkerPredicate)
  // repeated .schema.improbable.WorkerClaim field1_claim = 1;
  for (unsigned int i = 0, n = this->field1_claim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field1_claim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.WorkerPredicate)
}

::google::protobuf::uint8* WorkerPredicate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.WorkerPredicate)
  // repeated .schema.improbable.WorkerClaim field1_claim = 1;
  for (unsigned int i = 0, n = this->field1_claim_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field1_claim(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.WorkerPredicate)
  return target;
}

int WorkerPredicate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.WorkerPredicate)
  int total_size = 0;

  // repeated .schema.improbable.WorkerClaim field1_claim = 1;
  total_size += 1 * this->field1_claim_size();
  for (int i = 0; i < this->field1_claim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field1_claim(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerPredicate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.WorkerPredicate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorkerPredicate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkerPredicate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.WorkerPredicate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.WorkerPredicate)
    MergeFrom(*source);
  }
}

void WorkerPredicate::MergeFrom(const WorkerPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.WorkerPredicate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  field1_claim_.MergeFrom(from.field1_claim_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkerPredicate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.WorkerPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerPredicate::CopyFrom(const WorkerPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.WorkerPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerPredicate::IsInitialized() const {

  return true;
}

void WorkerPredicate::Swap(WorkerPredicate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerPredicate::InternalSwap(WorkerPredicate* other) {
  field1_claim_.UnsafeArenaSwap(&other->field1_claim_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkerPredicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerPredicate_descriptor_;
  metadata.reflection = WorkerPredicate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkerPredicate

// repeated .schema.improbable.WorkerClaim field1_claim = 1;
int WorkerPredicate::field1_claim_size() const {
  return field1_claim_.size();
}
void WorkerPredicate::clear_field1_claim() {
  field1_claim_.Clear();
}
const ::schema::improbable::WorkerClaim& WorkerPredicate::field1_claim(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.WorkerPredicate.field1_claim)
  return field1_claim_.Get(index);
}
::schema::improbable::WorkerClaim* WorkerPredicate::mutable_field1_claim(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.WorkerPredicate.field1_claim)
  return field1_claim_.Mutable(index);
}
::schema::improbable::WorkerClaim* WorkerPredicate::add_field1_claim() {
  // @@protoc_insertion_point(field_add:schema.improbable.WorkerPredicate.field1_claim)
  return field1_claim_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::WorkerClaim >*
WorkerPredicate::mutable_field1_claim() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.WorkerPredicate.field1_claim)
  return &field1_claim_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::WorkerClaim >&
WorkerPredicate::field1_claim() const {
  // @@protoc_insertion_point(field_list:schema.improbable.WorkerPredicate.field1_claim)
  return field1_claim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentAcl::kField1WriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentAcl::ComponentAcl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.ComponentAcl)
}

void ComponentAcl::InitAsDefaultInstance() {
}

ComponentAcl::ComponentAcl(const ComponentAcl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.ComponentAcl)
}

void ComponentAcl::SharedCtor() {
  _cached_size_ = 0;
  field1_write_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  field1_write_.SetEntryDescriptor(
      &::schema::improbable::ComponentAcl_Field1WriteEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentAcl::~ComponentAcl() {
  // @@protoc_insertion_point(destructor:schema.improbable.ComponentAcl)
  SharedDtor();
}

void ComponentAcl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComponentAcl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentAcl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentAcl_descriptor_;
}

const ComponentAcl& ComponentAcl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

ComponentAcl* ComponentAcl::default_instance_ = NULL;

ComponentAcl* ComponentAcl::New(::google::protobuf::Arena* arena) const {
  ComponentAcl* n = new ComponentAcl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComponentAcl::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.ComponentAcl)
  field1_write_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ComponentAcl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.ComponentAcl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .schema.improbable.WorkerPredicate> field1_write = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field1_write:
          ComponentAcl_Field1WriteEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate > > parser(&field1_write_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field1_write;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.ComponentAcl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.ComponentAcl)
  return false;
#undef DO_
}

void ComponentAcl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.ComponentAcl)
  // map<uint32, .schema.improbable.WorkerPredicate> field1_write = 1;
  if (!this->field1_write().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->field1_write().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->field1_write().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_iterator
          it = this->field1_write().begin();
          it != this->field1_write().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ComponentAcl_Field1WriteEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(field1_write_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ComponentAcl_Field1WriteEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_iterator
          it = this->field1_write().begin();
          it != this->field1_write().end(); ++it) {
        entry.reset(field1_write_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.ComponentAcl)
}

::google::protobuf::uint8* ComponentAcl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.ComponentAcl)
  // map<uint32, .schema.improbable.WorkerPredicate> field1_write = 1;
  if (!this->field1_write().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->field1_write().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->field1_write().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_iterator
          it = this->field1_write().begin();
          it != this->field1_write().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ComponentAcl_Field1WriteEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(field1_write_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ComponentAcl_Field1WriteEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_iterator
          it = this->field1_write().begin();
          it != this->field1_write().end(); ++it) {
        entry.reset(field1_write_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.ComponentAcl)
  return target;
}

int ComponentAcl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.ComponentAcl)
  int total_size = 0;

  // map<uint32, .schema.improbable.WorkerPredicate> field1_write = 1;
  total_size += 1 * this->field1_write_size();
  {
    ::google::protobuf::scoped_ptr<ComponentAcl_Field1WriteEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >::const_iterator
        it = this->field1_write().begin();
        it != this->field1_write().end(); ++it) {
      entry.reset(field1_write_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentAcl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.ComponentAcl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComponentAcl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComponentAcl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.ComponentAcl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.ComponentAcl)
    MergeFrom(*source);
  }
}

void ComponentAcl::MergeFrom(const ComponentAcl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.ComponentAcl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  field1_write_.MergeFrom(from.field1_write_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ComponentAcl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.ComponentAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentAcl::CopyFrom(const ComponentAcl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.ComponentAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentAcl::IsInitialized() const {

  return true;
}

void ComponentAcl::Swap(ComponentAcl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentAcl::InternalSwap(ComponentAcl* other) {
  field1_write_.Swap(&other->field1_write_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComponentAcl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentAcl_descriptor_;
  metadata.reflection = ComponentAcl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComponentAcl

// map<uint32, .schema.improbable.WorkerPredicate> field1_write = 1;
int ComponentAcl::field1_write_size() const {
  return field1_write_.size();
}
void ComponentAcl::clear_field1_write() {
  field1_write_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >&
ComponentAcl::field1_write() const {
  // @@protoc_insertion_point(field_map:schema.improbable.ComponentAcl.field1_write)
  return field1_write_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::schema::improbable::WorkerPredicate >*
ComponentAcl::mutable_field1_write() {
  // @@protoc_insertion_point(field_mutable_map:schema.improbable.ComponentAcl.field1_write)
  return field1_write_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAclData::kField1ReadFieldNumber;
const int EntityAclData::kField2ComponentAclFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityAclData::EntityAclData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.EntityAclData)
}

void EntityAclData::InitAsDefaultInstance() {
  field1_read_ = const_cast< ::schema::improbable::WorkerPredicate*>(&::schema::improbable::WorkerPredicate::default_instance());
  field2_component_acl_ = const_cast< ::schema::improbable::ComponentAcl*>(&::schema::improbable::ComponentAcl::default_instance());
}

EntityAclData::EntityAclData(const EntityAclData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.EntityAclData)
}

void EntityAclData::SharedCtor() {
  _cached_size_ = 0;
  field1_read_ = NULL;
  field2_component_acl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityAclData::~EntityAclData() {
  // @@protoc_insertion_point(destructor:schema.improbable.EntityAclData)
  SharedDtor();
}

void EntityAclData::SharedDtor() {
  if (this != default_instance_) {
    delete field1_read_;
    delete field2_component_acl_;
  }
}

void EntityAclData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAclData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityAclData_descriptor_;
}

const EntityAclData& EntityAclData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

EntityAclData* EntityAclData::default_instance_ = NULL;

EntityAclData* EntityAclData::New(::google::protobuf::Arena* arena) const {
  EntityAclData* n = new EntityAclData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAclData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.EntityAclData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_field1_read()) {
      if (field1_read_ != NULL) field1_read_->::schema::improbable::WorkerPredicate::Clear();
    }
    if (has_field2_component_acl()) {
      if (field2_component_acl_ != NULL) field2_component_acl_->::schema::improbable::ComponentAcl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityAclData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.EntityAclData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.WorkerPredicate field1_read = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_field2_component_acl;
        break;
      }

      // optional .schema.improbable.ComponentAcl field2_component_acl = 2;
      case 2: {
        if (tag == 18) {
         parse_field2_component_acl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field2_component_acl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.EntityAclData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.EntityAclData)
  return false;
#undef DO_
}

void EntityAclData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.EntityAclData)
  // optional .schema.improbable.WorkerPredicate field1_read = 1;
  if (has_field1_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field1_read_, output);
  }

  // optional .schema.improbable.ComponentAcl field2_component_acl = 2;
  if (has_field2_component_acl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field2_component_acl_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.EntityAclData)
}

::google::protobuf::uint8* EntityAclData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.EntityAclData)
  // optional .schema.improbable.WorkerPredicate field1_read = 1;
  if (has_field1_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field1_read_, false, target);
  }

  // optional .schema.improbable.ComponentAcl field2_component_acl = 2;
  if (has_field2_component_acl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field2_component_acl_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.EntityAclData)
  return target;
}

int EntityAclData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.EntityAclData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .schema.improbable.WorkerPredicate field1_read = 1;
    if (has_field1_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->field1_read_);
    }

    // optional .schema.improbable.ComponentAcl field2_component_acl = 2;
    if (has_field2_component_acl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->field2_component_acl_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAclData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.EntityAclData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntityAclData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAclData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.EntityAclData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.EntityAclData)
    MergeFrom(*source);
  }
}

void EntityAclData::MergeFrom(const EntityAclData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.EntityAclData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_read()) {
      mutable_field1_read()->::schema::improbable::WorkerPredicate::MergeFrom(from.field1_read());
    }
    if (from.has_field2_component_acl()) {
      mutable_field2_component_acl()->::schema::improbable::ComponentAcl::MergeFrom(from.field2_component_acl());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityAclData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.EntityAclData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAclData::CopyFrom(const EntityAclData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.EntityAclData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAclData::IsInitialized() const {

  return true;
}

void EntityAclData::Swap(EntityAclData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAclData::InternalSwap(EntityAclData* other) {
  std::swap(field1_read_, other->field1_read_);
  std::swap(field2_component_acl_, other->field2_component_acl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAclData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityAclData_descriptor_;
  metadata.reflection = EntityAclData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityAclData

// optional .schema.improbable.WorkerPredicate field1_read = 1;
bool EntityAclData::has_field1_read() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EntityAclData::set_has_field1_read() {
  _has_bits_[0] |= 0x00000001u;
}
void EntityAclData::clear_has_field1_read() {
  _has_bits_[0] &= ~0x00000001u;
}
void EntityAclData::clear_field1_read() {
  if (field1_read_ != NULL) field1_read_->::schema::improbable::WorkerPredicate::Clear();
  clear_has_field1_read();
}
const ::schema::improbable::WorkerPredicate& EntityAclData::field1_read() const {
  // @@protoc_insertion_point(field_get:schema.improbable.EntityAclData.field1_read)
  return field1_read_ != NULL ? *field1_read_ : *default_instance_->field1_read_;
}
::schema::improbable::WorkerPredicate* EntityAclData::mutable_field1_read() {
  set_has_field1_read();
  if (field1_read_ == NULL) {
    field1_read_ = new ::schema::improbable::WorkerPredicate;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.EntityAclData.field1_read)
  return field1_read_;
}
::schema::improbable::WorkerPredicate* EntityAclData::release_field1_read() {
  // @@protoc_insertion_point(field_release:schema.improbable.EntityAclData.field1_read)
  clear_has_field1_read();
  ::schema::improbable::WorkerPredicate* temp = field1_read_;
  field1_read_ = NULL;
  return temp;
}
void EntityAclData::set_allocated_field1_read(::schema::improbable::WorkerPredicate* field1_read) {
  delete field1_read_;
  field1_read_ = field1_read;
  if (field1_read) {
    set_has_field1_read();
  } else {
    clear_has_field1_read();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.EntityAclData.field1_read)
}

// optional .schema.improbable.ComponentAcl field2_component_acl = 2;
bool EntityAclData::has_field2_component_acl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EntityAclData::set_has_field2_component_acl() {
  _has_bits_[0] |= 0x00000002u;
}
void EntityAclData::clear_has_field2_component_acl() {
  _has_bits_[0] &= ~0x00000002u;
}
void EntityAclData::clear_field2_component_acl() {
  if (field2_component_acl_ != NULL) field2_component_acl_->::schema::improbable::ComponentAcl::Clear();
  clear_has_field2_component_acl();
}
const ::schema::improbable::ComponentAcl& EntityAclData::field2_component_acl() const {
  // @@protoc_insertion_point(field_get:schema.improbable.EntityAclData.field2_component_acl)
  return field2_component_acl_ != NULL ? *field2_component_acl_ : *default_instance_->field2_component_acl_;
}
::schema::improbable::ComponentAcl* EntityAclData::mutable_field2_component_acl() {
  set_has_field2_component_acl();
  if (field2_component_acl_ == NULL) {
    field2_component_acl_ = new ::schema::improbable::ComponentAcl;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.EntityAclData.field2_component_acl)
  return field2_component_acl_;
}
::schema::improbable::ComponentAcl* EntityAclData::release_field2_component_acl() {
  // @@protoc_insertion_point(field_release:schema.improbable.EntityAclData.field2_component_acl)
  clear_has_field2_component_acl();
  ::schema::improbable::ComponentAcl* temp = field2_component_acl_;
  field2_component_acl_ = NULL;
  return temp;
}
void EntityAclData::set_allocated_field2_component_acl(::schema::improbable::ComponentAcl* field2_component_acl) {
  delete field2_component_acl_;
  field2_component_acl_ = field2_component_acl;
  if (field2_component_acl) {
    set_has_field2_component_acl();
  } else {
    clear_has_field2_component_acl();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.EntityAclData.field2_component_acl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityAcl_Events::EntityAcl_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.EntityAcl.Events)
}

void EntityAcl_Events::InitAsDefaultInstance() {
}

EntityAcl_Events::EntityAcl_Events(const EntityAcl_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.EntityAcl.Events)
}

void EntityAcl_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityAcl_Events::~EntityAcl_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.EntityAcl.Events)
  SharedDtor();
}

void EntityAcl_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityAcl_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAcl_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityAcl_Events_descriptor_;
}

const EntityAcl_Events& EntityAcl_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

EntityAcl_Events* EntityAcl_Events::default_instance_ = NULL;

EntityAcl_Events* EntityAcl_Events::New(::google::protobuf::Arena* arena) const {
  EntityAcl_Events* n = new EntityAcl_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAcl_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.EntityAcl.Events)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityAcl_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.EntityAcl.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.EntityAcl.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.EntityAcl.Events)
  return false;
#undef DO_
}

void EntityAcl_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.EntityAcl.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.EntityAcl.Events)
}

::google::protobuf::uint8* EntityAcl_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.EntityAcl.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.EntityAcl.Events)
  return target;
}

int EntityAcl_Events::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.EntityAcl.Events)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAcl_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.EntityAcl.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntityAcl_Events* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAcl_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.EntityAcl.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.EntityAcl.Events)
    MergeFrom(*source);
  }
}

void EntityAcl_Events::MergeFrom(const EntityAcl_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.EntityAcl.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityAcl_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.EntityAcl.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAcl_Events::CopyFrom(const EntityAcl_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.EntityAcl.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAcl_Events::IsInitialized() const {

  return true;
}

void EntityAcl_Events::Swap(EntityAcl_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAcl_Events::InternalSwap(EntityAcl_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAcl_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityAcl_Events_descriptor_;
  metadata.reflection = EntityAcl_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityAcl_Commands::EntityAcl_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.EntityAcl.Commands)
}

void EntityAcl_Commands::InitAsDefaultInstance() {
}

EntityAcl_Commands::EntityAcl_Commands(const EntityAcl_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.EntityAcl.Commands)
}

void EntityAcl_Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityAcl_Commands::~EntityAcl_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.EntityAcl.Commands)
  SharedDtor();
}

void EntityAcl_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityAcl_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAcl_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityAcl_Commands_descriptor_;
}

const EntityAcl_Commands& EntityAcl_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

EntityAcl_Commands* EntityAcl_Commands::default_instance_ = NULL;

EntityAcl_Commands* EntityAcl_Commands::New(::google::protobuf::Arena* arena) const {
  EntityAcl_Commands* n = new EntityAcl_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAcl_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.EntityAcl.Commands)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityAcl_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.EntityAcl.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.EntityAcl.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.EntityAcl.Commands)
  return false;
#undef DO_
}

void EntityAcl_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.EntityAcl.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.EntityAcl.Commands)
}

::google::protobuf::uint8* EntityAcl_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.EntityAcl.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.EntityAcl.Commands)
  return target;
}

int EntityAcl_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.EntityAcl.Commands)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAcl_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.EntityAcl.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntityAcl_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAcl_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.EntityAcl.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.EntityAcl.Commands)
    MergeFrom(*source);
  }
}

void EntityAcl_Commands::MergeFrom(const EntityAcl_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.EntityAcl.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityAcl_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.EntityAcl.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAcl_Commands::CopyFrom(const EntityAcl_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.EntityAcl.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAcl_Commands::IsInitialized() const {

  return true;
}

void EntityAcl_Commands::Swap(EntityAcl_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAcl_Commands::InternalSwap(EntityAcl_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAcl_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityAcl_Commands_descriptor_;
  metadata.reflection = EntityAcl_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAcl::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::EntityAclData >, 11, false >
  EntityAcl::component_extension(kComponentExtensionFieldNumber, ::schema::improbable::EntityAclData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAcl::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::EntityAcl_Events >, 11, false >
  EntityAcl::event_extension(kEventExtensionFieldNumber, ::schema::improbable::EntityAcl_Events::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityAcl::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::EntityAcl_Commands >, 11, false >
  EntityAcl::command_extension(kCommandExtensionFieldNumber, ::schema::improbable::EntityAcl_Commands::default_instance());
EntityAcl::EntityAcl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.EntityAcl)
}

void EntityAcl::InitAsDefaultInstance() {
}

EntityAcl::EntityAcl(const EntityAcl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.EntityAcl)
}

void EntityAcl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityAcl::~EntityAcl() {
  // @@protoc_insertion_point(destructor:schema.improbable.EntityAcl)
  SharedDtor();
}

void EntityAcl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityAcl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAcl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityAcl_descriptor_;
}

const EntityAcl& EntityAcl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fstandard_5flibrary_2eproto();
  return *default_instance_;
}

EntityAcl* EntityAcl::default_instance_ = NULL;

EntityAcl* EntityAcl::New(::google::protobuf::Arena* arena) const {
  EntityAcl* n = new EntityAcl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityAcl::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.EntityAcl)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityAcl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.EntityAcl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.EntityAcl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.EntityAcl)
  return false;
#undef DO_
}

void EntityAcl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.EntityAcl)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.EntityAcl)
}

::google::protobuf::uint8* EntityAcl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.EntityAcl)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.EntityAcl)
  return target;
}

int EntityAcl::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.EntityAcl)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAcl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.EntityAcl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntityAcl* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityAcl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.EntityAcl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.EntityAcl)
    MergeFrom(*source);
  }
}

void EntityAcl::MergeFrom(const EntityAcl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.EntityAcl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityAcl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.EntityAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAcl::CopyFrom(const EntityAcl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.EntityAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAcl::IsInitialized() const {

  return true;
}

void EntityAcl::Swap(EntityAcl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityAcl::InternalSwap(EntityAcl* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityAcl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityAcl_descriptor_;
  metadata.reflection = EntityAcl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityAcl_Events

// -------------------------------------------------------------------

// EntityAcl_Commands

// -------------------------------------------------------------------

// EntityAcl

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
