// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/general/WorldVelocity.schema
#include <improbable/general/WorldVelocity.h>
#include <improbable/entity_state.pb.h>
#include <improbable/general/WorldVelocity.pb.h>

namespace improbable {
namespace general {

// Implementation of WorldVelocityData.
//----------------------------------------------------------------

WorldVelocityData::WorldVelocityData(const ::improbable::math::Vector3f& velocity)
: _velocity{velocity} {}

bool WorldVelocityData::operator==(const WorldVelocityData& value) const {
  return
      _velocity == value._velocity;
}

bool WorldVelocityData::operator!=(const WorldVelocityData& value) const {
  return !operator==(value);
}

const ::improbable::math::Vector3f& WorldVelocityData::velocity() const {
  return _velocity;
}

::improbable::math::Vector3f& WorldVelocityData::velocity() {
  return _velocity;
}

WorldVelocityData& WorldVelocityData::set_velocity(const ::improbable::math::Vector3f& value) {
  _velocity = value;
  return *this;
}

// Implementation of WorldVelocity.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId WorldVelocity::ComponentId;

bool WorldVelocity::Update::operator==(const WorldVelocity::Update& value) const {
  return
      _velocity == value._velocity;
}

bool WorldVelocity::Update::operator!=(const WorldVelocity::Update& value) const {
  return !operator==(value);
}

WorldVelocity::Update WorldVelocity::Update::FromInitialData(const ::improbable::general::WorldVelocityData& data) {
  WorldVelocity::Update update;
  update._velocity.emplace(data.velocity());
  return update;
}

::improbable::general::WorldVelocityData WorldVelocity::Update::ToInitialData() const {
  return ::improbable::general::WorldVelocityData(*_velocity);
}

void WorldVelocity::Update::ApplyTo(::improbable::general::WorldVelocityData& data) const {
  if (_velocity) {
    data.set_velocity(*_velocity);
  }
}

const ::worker::Option< ::improbable::math::Vector3f >& WorldVelocity::Update::velocity() const {
  return _velocity;
}

::worker::Option< ::improbable::math::Vector3f >& WorldVelocity::Update::velocity() {
  return _velocity;
}

WorldVelocity::Update& WorldVelocity::Update::set_velocity(const ::improbable::math::Vector3f& value) {
  _velocity.emplace(value); return *this;
}

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Serialize_WorldVelocityData(
    const ::improbable::general::WorldVelocityData& data,
    ::schema::improbable::general::WorldVelocityData& proto) {
  ::improbable::math::detail::Serialize_Vector3f(data.velocity(), *proto.mutable_field1_velocity());
}

::improbable::general::WorldVelocityData Deserialize_WorldVelocityData(
    const ::schema::improbable::general::WorldVelocityData& proto) {
  ::improbable::general::WorldVelocityData result{
      ::improbable::math::detail::Deserialize_Vector3f(proto.field1_velocity())};
  return result;
}

namespace {

void VtableBufferFree_WorldVelocity(::worker::ComponentId, std::uint8_t* buffer) {
  delete[] buffer;
}

void VtableFree_WorldVelocity(
    ::worker::ComponentId, std::uint8_t object_type,
    ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    delete static_cast< ::improbable::general::WorldVelocity::Update* >(object);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    delete static_cast< GenericCommandObject_WorldVelocity* >(object);
  }
}

::worker::detail::ClientObject* VtableCopy_WorldVelocity(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update ||
      object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    return new ::improbable::general::WorldVelocity::Update(*static_cast<const ::improbable::general::WorldVelocity::Update*>(object));
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request ||
             object_type == ::worker::detail::ClientComponentVtable::Response) {
    return new GenericCommandObject_WorldVelocity(
        *static_cast<const GenericCommandObject_WorldVelocity*>(object));
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_WorldVelocity(
    ::worker::ComponentId, std::uint8_t object_type, const std::uint8_t* buffer,
    std::uint32_t length, ::worker::detail::ClientObject** object) {
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::general::WorldVelocity::Update;
    auto client_object = static_cast< ::improbable::general::WorldVelocity::Update* >(*object);
    {
      const auto& proto = proto_wrapper.entity_state().GetExtension(::schema::improbable::general::WorldVelocity::component_extension);

      std::set<std::uint32_t> fields_to_clear{proto_wrapper.fields_to_clear().begin(),
                                              proto_wrapper.fields_to_clear().end()};
      if (proto.has_field1_velocity()) {
        client_object->velocity().emplace(::improbable::math::detail::Deserialize_Vector3f(proto.field1_velocity()));
      }
    }
    {
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
    *object = new ::improbable::general::WorldVelocity::Update;
    auto client_object = static_cast< ::improbable::general::WorldVelocity::Update* >(*object);
    const auto& proto = proto_wrapper.GetExtension(::schema::improbable::general::WorldVelocity::component_extension);

    client_object->velocity().emplace(::improbable::math::detail::Deserialize_Vector3f(proto.field1_velocity()));
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    if (!proto_wrapper.ParseFromArray(buffer, length)) {
      return false;
    }
  }
  return true;
}

void VtableSerialize_WorldVelocity(
    ::worker::ComponentId, std::uint8_t object_type,
    const ::worker::detail::ClientObject* object, std::uint8_t** buffer,
    std::uint32_t* length) {
  static_cast<void>(object);
  if (object_type == ::worker::detail::ClientComponentVtable::Update) {
    ::schema::improbable::EntityComponentUpdate proto_wrapper;
    const auto& data = *static_cast<const ::improbable::general::WorldVelocity::Update*>(object);
    {
      auto& proto = *proto_wrapper.mutable_entity_state()->MutableExtension(::schema::improbable::general::WorldVelocity::component_extension);
      if (data.velocity()) {
        ::improbable::math::detail::Serialize_Vector3f(*data.velocity(), *proto.mutable_field1_velocity());
      }
    }
    {
      proto_wrapper.mutable_entity_event()->MutableExtension(::schema::improbable::general::WorldVelocity::event_extension);
    }

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Snapshot) {
    ::schema::improbable::EntityState proto_wrapper;
    const auto& data = *static_cast<const ::improbable::general::WorldVelocity::Update*>(object);
    auto& proto = *proto_wrapper.MutableExtension(::schema::improbable::general::WorldVelocity::component_extension);

    ::improbable::math::detail::Serialize_Vector3f(*data.velocity(), *proto.mutable_field1_velocity());

    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Request) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::general::WorldVelocity::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  } else if (object_type == ::worker::detail::ClientComponentVtable::Response) {
    ::schema::improbable::EntityCommand proto_wrapper;
    proto_wrapper.MutableExtension(::schema::improbable::general::WorldVelocity::command_extension);


    *length = proto_wrapper.ByteSize();
    *buffer = new std::uint8_t[*length];
    proto_wrapper.SerializeToArray(*buffer, *length);
  }
}

}  // anonymous namespace

const ::worker::detail::ClientComponentVtable& Vtable_WorldVelocity() {
  static const ::worker::detail::ClientComponentVtable vtable = {
      1004,
      &detail::VtableBufferFree_WorldVelocity,
      &detail::VtableFree_WorldVelocity,
      &detail::VtableCopy_WorldVelocity,
      &detail::VtableDeserialize_WorldVelocity,
      &detail::VtableSerialize_WorldVelocity,
  };
  return vtable;
}

}  // ::detail

}  // ::general
}  // ::improbable
