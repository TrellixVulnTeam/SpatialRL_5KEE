// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/general/WorldVelocity.proto

#ifndef PROTOBUF_improbable_2fgeneral_2fWorldVelocity_2eproto__INCLUDED
#define PROTOBUF_improbable_2fgeneral_2fWorldVelocity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "improbable/entity_state.pb.h"
#include "improbable/math/vector3f.pb.h"
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace general {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto();

class WorldVelocity;
class WorldVelocityData;
class WorldVelocity_Commands;
class WorldVelocity_Events;

// ===================================================================

class WorldVelocityData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.general.WorldVelocityData) */ {
 public:
  WorldVelocityData();
  virtual ~WorldVelocityData();

  WorldVelocityData(const WorldVelocityData& from);

  inline WorldVelocityData& operator=(const WorldVelocityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldVelocityData& default_instance();

  void Swap(WorldVelocityData* other);

  // implements Message ----------------------------------------------

  inline WorldVelocityData* New() const { return New(NULL); }

  WorldVelocityData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldVelocityData& from);
  void MergeFrom(const WorldVelocityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldVelocityData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .schema.improbable.math.Vector3f field1_velocity = 1;
  bool has_field1_velocity() const;
  void clear_field1_velocity();
  static const int kField1VelocityFieldNumber = 1;
  const ::schema::improbable::math::Vector3f& field1_velocity() const;
  ::schema::improbable::math::Vector3f* mutable_field1_velocity();
  ::schema::improbable::math::Vector3f* release_field1_velocity();
  void set_allocated_field1_velocity(::schema::improbable::math::Vector3f* field1_velocity);

  // @@protoc_insertion_point(class_scope:schema.improbable.general.WorldVelocityData)
 private:
  inline void set_has_field1_velocity();
  inline void clear_has_field1_velocity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::schema::improbable::math::Vector3f* field1_velocity_;
  friend void  protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto();

  void InitAsDefaultInstance();
  static WorldVelocityData* default_instance_;
};
// -------------------------------------------------------------------

class WorldVelocity_Events : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.general.WorldVelocity.Events) */ {
 public:
  WorldVelocity_Events();
  virtual ~WorldVelocity_Events();

  WorldVelocity_Events(const WorldVelocity_Events& from);

  inline WorldVelocity_Events& operator=(const WorldVelocity_Events& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldVelocity_Events& default_instance();

  void Swap(WorldVelocity_Events* other);

  // implements Message ----------------------------------------------

  inline WorldVelocity_Events* New() const { return New(NULL); }

  WorldVelocity_Events* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldVelocity_Events& from);
  void MergeFrom(const WorldVelocity_Events& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldVelocity_Events* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:schema.improbable.general.WorldVelocity.Events)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto();

  void InitAsDefaultInstance();
  static WorldVelocity_Events* default_instance_;
};
// -------------------------------------------------------------------

class WorldVelocity_Commands : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.general.WorldVelocity.Commands) */ {
 public:
  WorldVelocity_Commands();
  virtual ~WorldVelocity_Commands();

  WorldVelocity_Commands(const WorldVelocity_Commands& from);

  inline WorldVelocity_Commands& operator=(const WorldVelocity_Commands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldVelocity_Commands& default_instance();

  void Swap(WorldVelocity_Commands* other);

  // implements Message ----------------------------------------------

  inline WorldVelocity_Commands* New() const { return New(NULL); }

  WorldVelocity_Commands* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldVelocity_Commands& from);
  void MergeFrom(const WorldVelocity_Commands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldVelocity_Commands* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:schema.improbable.general.WorldVelocity.Commands)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto();

  void InitAsDefaultInstance();
  static WorldVelocity_Commands* default_instance_;
};
// -------------------------------------------------------------------

class WorldVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:schema.improbable.general.WorldVelocity) */ {
 public:
  WorldVelocity();
  virtual ~WorldVelocity();

  WorldVelocity(const WorldVelocity& from);

  inline WorldVelocity& operator=(const WorldVelocity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldVelocity& default_instance();

  void Swap(WorldVelocity* other);

  // implements Message ----------------------------------------------

  inline WorldVelocity* New() const { return New(NULL); }

  WorldVelocity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldVelocity& from);
  void MergeFrom(const WorldVelocity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef WorldVelocity_Events Events;
  typedef WorldVelocity_Commands Commands;

  // accessors -------------------------------------------------------

  static const int kComponentExtensionFieldNumber = 1004;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocityData >, 11, false >
    component_extension;
  static const int kEventExtensionFieldNumber = 1004;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocity_Events >, 11, false >
    event_extension;
  static const int kCommandExtensionFieldNumber = 1004;
  static ::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
      ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocity_Commands >, 11, false >
    command_extension;
  // @@protoc_insertion_point(class_scope:schema.improbable.general.WorldVelocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  friend void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto();

  void InitAsDefaultInstance();
  static WorldVelocity* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldVelocityData

// optional .schema.improbable.math.Vector3f field1_velocity = 1;
inline bool WorldVelocityData::has_field1_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldVelocityData::set_has_field1_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldVelocityData::clear_has_field1_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldVelocityData::clear_field1_velocity() {
  if (field1_velocity_ != NULL) field1_velocity_->::schema::improbable::math::Vector3f::Clear();
  clear_has_field1_velocity();
}
inline const ::schema::improbable::math::Vector3f& WorldVelocityData::field1_velocity() const {
  // @@protoc_insertion_point(field_get:schema.improbable.general.WorldVelocityData.field1_velocity)
  return field1_velocity_ != NULL ? *field1_velocity_ : *default_instance_->field1_velocity_;
}
inline ::schema::improbable::math::Vector3f* WorldVelocityData::mutable_field1_velocity() {
  set_has_field1_velocity();
  if (field1_velocity_ == NULL) {
    field1_velocity_ = new ::schema::improbable::math::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.general.WorldVelocityData.field1_velocity)
  return field1_velocity_;
}
inline ::schema::improbable::math::Vector3f* WorldVelocityData::release_field1_velocity() {
  // @@protoc_insertion_point(field_release:schema.improbable.general.WorldVelocityData.field1_velocity)
  clear_has_field1_velocity();
  ::schema::improbable::math::Vector3f* temp = field1_velocity_;
  field1_velocity_ = NULL;
  return temp;
}
inline void WorldVelocityData::set_allocated_field1_velocity(::schema::improbable::math::Vector3f* field1_velocity) {
  delete field1_velocity_;
  field1_velocity_ = field1_velocity;
  if (field1_velocity) {
    set_has_field1_velocity();
  } else {
    clear_has_field1_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.general.WorldVelocityData.field1_velocity)
}

// -------------------------------------------------------------------

// WorldVelocity_Events

// -------------------------------------------------------------------

// WorldVelocity_Commands

// -------------------------------------------------------------------

// WorldVelocity

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace general
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_improbable_2fgeneral_2fWorldVelocity_2eproto__INCLUDED
