// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/general/WorldTransform.schema
#ifndef SPATIALOS_SCHEMA_improbable_general_WorldTransform_schema_13077088389630444667_INCLUDED
#define SPATIALOS_SCHEMA_improbable_general_WorldTransform_schema_13077088389630444667_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace general {

class WorldTransformData;

}  // ::improbable
}  // ::general
}  // ::schema

namespace improbable {
namespace general {

// Forward declarations.
//----------------------------------------------------------------

class WorldTransformData;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_WorldTransform();
struct GenericCommandObject_WorldTransform {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class WorldTransformData {
public:
  // Main constructor.
  WorldTransformData(
      const ::improbable::math::Coordinates& position,
      std::uint32_t rotation);

  // Copyable and moveable.
  WorldTransformData(WorldTransformData&&) = default;
  WorldTransformData(const WorldTransformData&) = default;
  WorldTransformData& operator=(WorldTransformData&&) = default;
  WorldTransformData& operator=(const WorldTransformData&) = default;
  ~WorldTransformData() = default;

  bool operator==(const WorldTransformData&) const;
  bool operator!=(const WorldTransformData&) const;

  // Field position = 1.
  const ::improbable::math::Coordinates& position() const;
  ::improbable::math::Coordinates& position();
  WorldTransformData& set_position(const ::improbable::math::Coordinates&);

  // Field rotation = 2.
  std::uint32_t rotation() const;
  std::uint32_t& rotation();
  WorldTransformData& set_rotation(std::uint32_t);

private:
  ::improbable::math::Coordinates _position;
  std::uint32_t _rotation;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::general::WorldTransform;
 *
 *   WorldTransform::Update update;
 *   connection.SendComponentUpdate< WorldTransform >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< WorldTransform >(
 *       [&](const worker::ComponentUpdateOp< WorldTransform >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         WorldTransform::Update update = op.GetUpdate();
 *       });
 *
 *   WorldTransform::Data data = entity.Get< WorldTransform >();
 */
struct WorldTransform : ::worker::detail::ComponentMetaclassBase<
    WorldTransform, detail::Vtable_WorldTransform> {
  static constexpr const ::worker::ComponentId ComponentId = 1000;
  using Data = ::improbable::general::WorldTransformData;
  using GenericCommandObject = detail::GenericCommandObject_WorldTransform;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::general::WorldTransformData object. */
    static Update FromInitialData(const ::improbable::general::WorldTransformData& data);

    /**
     * Converts to a ::improbable::general::WorldTransformData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::general::WorldTransformData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::general::WorldTransformData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::general::WorldTransformData&) const;

    // Field position = 1.
    const ::worker::Option< ::improbable::math::Coordinates >& position() const;
    ::worker::Option< ::improbable::math::Coordinates >& position();
    Update& set_position(const ::improbable::math::Coordinates&);

    // Field rotation = 2.
    const ::worker::Option< std::uint32_t >& rotation() const;
    ::worker::Option< std::uint32_t >& rotation();
    Update& set_rotation(std::uint32_t);

  private:
    ::worker::Option< ::improbable::math::Coordinates > _position;
    ::worker::Option< std::uint32_t > _rotation;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_WorldTransformData(
    const ::improbable::general::WorldTransformData&,
    ::schema::improbable::general::WorldTransformData&);

::improbable::general::WorldTransformData Deserialize_WorldTransformData(
    const ::schema::improbable::general::WorldTransformData&);

}  // ::detail
}  // ::general
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_general_WorldTransform_schema_13077088389630444667_INCLUDED
