// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/general/WorldVelocity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/general/WorldVelocity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace general {

namespace {

const ::google::protobuf::Descriptor* WorldVelocityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldVelocityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldVelocity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldVelocity_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldVelocity_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldVelocity_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldVelocity_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldVelocity_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto() {
  protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/general/WorldVelocity.proto");
  GOOGLE_CHECK(file != NULL);
  WorldVelocityData_descriptor_ = file->message_type(0);
  static const int WorldVelocityData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocityData, field1_velocity_),
  };
  WorldVelocityData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldVelocityData_descriptor_,
      WorldVelocityData::default_instance_,
      WorldVelocityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocityData, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldVelocityData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocityData, _internal_metadata_),
      -1);
  WorldVelocity_descriptor_ = file->message_type(1);
  static const int WorldVelocity_offsets_[1] = {
  };
  WorldVelocity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldVelocity_descriptor_,
      WorldVelocity::default_instance_,
      WorldVelocity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldVelocity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity, _internal_metadata_),
      -1);
  WorldVelocity_Events_descriptor_ = WorldVelocity_descriptor_->nested_type(0);
  static const int WorldVelocity_Events_offsets_[1] = {
  };
  WorldVelocity_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldVelocity_Events_descriptor_,
      WorldVelocity_Events::default_instance_,
      WorldVelocity_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldVelocity_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity_Events, _internal_metadata_),
      -1);
  WorldVelocity_Commands_descriptor_ = WorldVelocity_descriptor_->nested_type(1);
  static const int WorldVelocity_Commands_offsets_[1] = {
  };
  WorldVelocity_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldVelocity_Commands_descriptor_,
      WorldVelocity_Commands::default_instance_,
      WorldVelocity_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldVelocity_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldVelocity_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgeneral_2fWorldVelocity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldVelocityData_descriptor_, &WorldVelocityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldVelocity_descriptor_, &WorldVelocity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldVelocity_Events_descriptor_, &WorldVelocity_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldVelocity_Commands_descriptor_, &WorldVelocity_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto() {
  delete WorldVelocityData::default_instance_;
  delete WorldVelocityData_reflection_;
  delete WorldVelocity::default_instance_;
  delete WorldVelocity_reflection_;
  delete WorldVelocity_Events::default_instance_;
  delete WorldVelocity_Events_reflection_;
  delete WorldVelocity_Commands::default_instance_;
  delete WorldVelocity_Commands_reflection_;
}

void protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::schema::improbable::math::protobuf_AddDesc_improbable_2fmath_2fvector3f_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&improbable/general/WorldVelocity.proto"
    "\022\031schema.improbable.general\032\035improbable/"
    "entity_state.proto\032\036improbable/math/vect"
    "or3f.proto\"\\\n\021WorldVelocityData\022G\n\017field"
    "1_velocity\030\001 \001(\0132 .schema.improbable.mat"
    "h.Vector3fB\014\302\363\030\010velocity\"\230\003\n\rWorldVeloci"
    "ty\032\010\n\006Events\032\n\n\010Commands2j\n\023component_ex"
    "tension\022\036.schema.improbable.EntityState\030"
    "\354\007 \001(\0132,.schema.improbable.general.World"
    "VelocityData2i\n\017event_extension\022\036.schema"
    ".improbable.EntityEvent\030\354\007 \001(\0132/.schema."
    "improbable.general.WorldVelocity.Events2"
    "o\n\021command_extension\022 .schema.improbable"
    ".EntityCommand\030\354\007 \001(\01321.schema.improbabl"
    "e.general.WorldVelocity.Commands:)\302\363\030%\n "
    "improbable.general.WorldVelocity\020\354\007B\031B\027W"
    "orldVelocityOuterClass", 662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/general/WorldVelocity.proto", &protobuf_RegisterTypes);
  WorldVelocityData::default_instance_ = new WorldVelocityData();
  WorldVelocity::default_instance_ = new WorldVelocity();
  WorldVelocity_Events::default_instance_ = new WorldVelocity_Events();
  WorldVelocity_Commands::default_instance_ = new WorldVelocity_Commands();
  WorldVelocityData::default_instance_->InitAsDefaultInstance();
  WorldVelocity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityState::default_instance(),
    1004, 11, false, false,
    &::schema::improbable::general::WorldVelocityData::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityEvent::default_instance(),
    1004, 11, false, false,
    &::schema::improbable::general::WorldVelocity_Events::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityCommand::default_instance(),
    1004, 11, false, false,
    &::schema::improbable::general::WorldVelocity_Commands::default_instance());
  WorldVelocity_Events::default_instance_->InitAsDefaultInstance();
  WorldVelocity_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgeneral_2fWorldVelocity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgeneral_2fWorldVelocity_2eproto {
  StaticDescriptorInitializer_improbable_2fgeneral_2fWorldVelocity_2eproto() {
    protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  }
} static_descriptor_initializer_improbable_2fgeneral_2fWorldVelocity_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldVelocityData::kField1VelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldVelocityData::WorldVelocityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.general.WorldVelocityData)
}

void WorldVelocityData::InitAsDefaultInstance() {
  field1_velocity_ = const_cast< ::schema::improbable::math::Vector3f*>(&::schema::improbable::math::Vector3f::default_instance());
}

WorldVelocityData::WorldVelocityData(const WorldVelocityData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.general.WorldVelocityData)
}

void WorldVelocityData::SharedCtor() {
  _cached_size_ = 0;
  field1_velocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldVelocityData::~WorldVelocityData() {
  // @@protoc_insertion_point(destructor:schema.improbable.general.WorldVelocityData)
  SharedDtor();
}

void WorldVelocityData::SharedDtor() {
  if (this != default_instance_) {
    delete field1_velocity_;
  }
}

void WorldVelocityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldVelocityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldVelocityData_descriptor_;
}

const WorldVelocityData& WorldVelocityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  return *default_instance_;
}

WorldVelocityData* WorldVelocityData::default_instance_ = NULL;

WorldVelocityData* WorldVelocityData::New(::google::protobuf::Arena* arena) const {
  WorldVelocityData* n = new WorldVelocityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldVelocityData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.general.WorldVelocityData)
  if (has_field1_velocity()) {
    if (field1_velocity_ != NULL) field1_velocity_->::schema::improbable::math::Vector3f::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldVelocityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.general.WorldVelocityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .schema.improbable.math.Vector3f field1_velocity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.general.WorldVelocityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.general.WorldVelocityData)
  return false;
#undef DO_
}

void WorldVelocityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.general.WorldVelocityData)
  // optional .schema.improbable.math.Vector3f field1_velocity = 1;
  if (has_field1_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field1_velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.general.WorldVelocityData)
}

::google::protobuf::uint8* WorldVelocityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.general.WorldVelocityData)
  // optional .schema.improbable.math.Vector3f field1_velocity = 1;
  if (has_field1_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field1_velocity_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.general.WorldVelocityData)
  return target;
}

int WorldVelocityData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.general.WorldVelocityData)
  int total_size = 0;

  // optional .schema.improbable.math.Vector3f field1_velocity = 1;
  if (has_field1_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field1_velocity_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldVelocityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.general.WorldVelocityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldVelocityData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldVelocityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.general.WorldVelocityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.general.WorldVelocityData)
    MergeFrom(*source);
  }
}

void WorldVelocityData::MergeFrom(const WorldVelocityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.general.WorldVelocityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_velocity()) {
      mutable_field1_velocity()->::schema::improbable::math::Vector3f::MergeFrom(from.field1_velocity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldVelocityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.general.WorldVelocityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldVelocityData::CopyFrom(const WorldVelocityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.general.WorldVelocityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldVelocityData::IsInitialized() const {

  return true;
}

void WorldVelocityData::Swap(WorldVelocityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldVelocityData::InternalSwap(WorldVelocityData* other) {
  std::swap(field1_velocity_, other->field1_velocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldVelocityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldVelocityData_descriptor_;
  metadata.reflection = WorldVelocityData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldVelocityData

// optional .schema.improbable.math.Vector3f field1_velocity = 1;
bool WorldVelocityData::has_field1_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorldVelocityData::set_has_field1_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
void WorldVelocityData::clear_has_field1_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorldVelocityData::clear_field1_velocity() {
  if (field1_velocity_ != NULL) field1_velocity_->::schema::improbable::math::Vector3f::Clear();
  clear_has_field1_velocity();
}
const ::schema::improbable::math::Vector3f& WorldVelocityData::field1_velocity() const {
  // @@protoc_insertion_point(field_get:schema.improbable.general.WorldVelocityData.field1_velocity)
  return field1_velocity_ != NULL ? *field1_velocity_ : *default_instance_->field1_velocity_;
}
::schema::improbable::math::Vector3f* WorldVelocityData::mutable_field1_velocity() {
  set_has_field1_velocity();
  if (field1_velocity_ == NULL) {
    field1_velocity_ = new ::schema::improbable::math::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:schema.improbable.general.WorldVelocityData.field1_velocity)
  return field1_velocity_;
}
::schema::improbable::math::Vector3f* WorldVelocityData::release_field1_velocity() {
  // @@protoc_insertion_point(field_release:schema.improbable.general.WorldVelocityData.field1_velocity)
  clear_has_field1_velocity();
  ::schema::improbable::math::Vector3f* temp = field1_velocity_;
  field1_velocity_ = NULL;
  return temp;
}
void WorldVelocityData::set_allocated_field1_velocity(::schema::improbable::math::Vector3f* field1_velocity) {
  delete field1_velocity_;
  field1_velocity_ = field1_velocity;
  if (field1_velocity) {
    set_has_field1_velocity();
  } else {
    clear_has_field1_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:schema.improbable.general.WorldVelocityData.field1_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldVelocity_Events::WorldVelocity_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.general.WorldVelocity.Events)
}

void WorldVelocity_Events::InitAsDefaultInstance() {
}

WorldVelocity_Events::WorldVelocity_Events(const WorldVelocity_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.general.WorldVelocity.Events)
}

void WorldVelocity_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldVelocity_Events::~WorldVelocity_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.general.WorldVelocity.Events)
  SharedDtor();
}

void WorldVelocity_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldVelocity_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldVelocity_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldVelocity_Events_descriptor_;
}

const WorldVelocity_Events& WorldVelocity_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  return *default_instance_;
}

WorldVelocity_Events* WorldVelocity_Events::default_instance_ = NULL;

WorldVelocity_Events* WorldVelocity_Events::New(::google::protobuf::Arena* arena) const {
  WorldVelocity_Events* n = new WorldVelocity_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldVelocity_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.general.WorldVelocity.Events)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldVelocity_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.general.WorldVelocity.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.general.WorldVelocity.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.general.WorldVelocity.Events)
  return false;
#undef DO_
}

void WorldVelocity_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.general.WorldVelocity.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.general.WorldVelocity.Events)
}

::google::protobuf::uint8* WorldVelocity_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.general.WorldVelocity.Events)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.general.WorldVelocity.Events)
  return target;
}

int WorldVelocity_Events::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.general.WorldVelocity.Events)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldVelocity_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.general.WorldVelocity.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldVelocity_Events* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldVelocity_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.general.WorldVelocity.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.general.WorldVelocity.Events)
    MergeFrom(*source);
  }
}

void WorldVelocity_Events::MergeFrom(const WorldVelocity_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.general.WorldVelocity.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldVelocity_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.general.WorldVelocity.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldVelocity_Events::CopyFrom(const WorldVelocity_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.general.WorldVelocity.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldVelocity_Events::IsInitialized() const {

  return true;
}

void WorldVelocity_Events::Swap(WorldVelocity_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldVelocity_Events::InternalSwap(WorldVelocity_Events* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldVelocity_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldVelocity_Events_descriptor_;
  metadata.reflection = WorldVelocity_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldVelocity_Commands::WorldVelocity_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.general.WorldVelocity.Commands)
}

void WorldVelocity_Commands::InitAsDefaultInstance() {
}

WorldVelocity_Commands::WorldVelocity_Commands(const WorldVelocity_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.general.WorldVelocity.Commands)
}

void WorldVelocity_Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldVelocity_Commands::~WorldVelocity_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.general.WorldVelocity.Commands)
  SharedDtor();
}

void WorldVelocity_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldVelocity_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldVelocity_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldVelocity_Commands_descriptor_;
}

const WorldVelocity_Commands& WorldVelocity_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  return *default_instance_;
}

WorldVelocity_Commands* WorldVelocity_Commands::default_instance_ = NULL;

WorldVelocity_Commands* WorldVelocity_Commands::New(::google::protobuf::Arena* arena) const {
  WorldVelocity_Commands* n = new WorldVelocity_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldVelocity_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.general.WorldVelocity.Commands)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldVelocity_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.general.WorldVelocity.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.general.WorldVelocity.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.general.WorldVelocity.Commands)
  return false;
#undef DO_
}

void WorldVelocity_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.general.WorldVelocity.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.general.WorldVelocity.Commands)
}

::google::protobuf::uint8* WorldVelocity_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.general.WorldVelocity.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.general.WorldVelocity.Commands)
  return target;
}

int WorldVelocity_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.general.WorldVelocity.Commands)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldVelocity_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.general.WorldVelocity.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldVelocity_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldVelocity_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.general.WorldVelocity.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.general.WorldVelocity.Commands)
    MergeFrom(*source);
  }
}

void WorldVelocity_Commands::MergeFrom(const WorldVelocity_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.general.WorldVelocity.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldVelocity_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.general.WorldVelocity.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldVelocity_Commands::CopyFrom(const WorldVelocity_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.general.WorldVelocity.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldVelocity_Commands::IsInitialized() const {

  return true;
}

void WorldVelocity_Commands::Swap(WorldVelocity_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldVelocity_Commands::InternalSwap(WorldVelocity_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldVelocity_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldVelocity_Commands_descriptor_;
  metadata.reflection = WorldVelocity_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldVelocity::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocityData >, 11, false >
  WorldVelocity::component_extension(kComponentExtensionFieldNumber, ::schema::improbable::general::WorldVelocityData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldVelocity::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocity_Events >, 11, false >
  WorldVelocity::event_extension(kEventExtensionFieldNumber, ::schema::improbable::general::WorldVelocity_Events::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldVelocity::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::general::WorldVelocity_Commands >, 11, false >
  WorldVelocity::command_extension(kCommandExtensionFieldNumber, ::schema::improbable::general::WorldVelocity_Commands::default_instance());
WorldVelocity::WorldVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.general.WorldVelocity)
}

void WorldVelocity::InitAsDefaultInstance() {
}

WorldVelocity::WorldVelocity(const WorldVelocity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.general.WorldVelocity)
}

void WorldVelocity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldVelocity::~WorldVelocity() {
  // @@protoc_insertion_point(destructor:schema.improbable.general.WorldVelocity)
  SharedDtor();
}

void WorldVelocity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldVelocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldVelocity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldVelocity_descriptor_;
}

const WorldVelocity& WorldVelocity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgeneral_2fWorldVelocity_2eproto();
  return *default_instance_;
}

WorldVelocity* WorldVelocity::default_instance_ = NULL;

WorldVelocity* WorldVelocity::New(::google::protobuf::Arena* arena) const {
  WorldVelocity* n = new WorldVelocity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.general.WorldVelocity)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.general.WorldVelocity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.general.WorldVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.general.WorldVelocity)
  return false;
#undef DO_
}

void WorldVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.general.WorldVelocity)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.general.WorldVelocity)
}

::google::protobuf::uint8* WorldVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.general.WorldVelocity)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.general.WorldVelocity)
  return target;
}

int WorldVelocity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.general.WorldVelocity)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.general.WorldVelocity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldVelocity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.general.WorldVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.general.WorldVelocity)
    MergeFrom(*source);
  }
}

void WorldVelocity::MergeFrom(const WorldVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.general.WorldVelocity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.general.WorldVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldVelocity::CopyFrom(const WorldVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.general.WorldVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldVelocity::IsInitialized() const {

  return true;
}

void WorldVelocity::Swap(WorldVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldVelocity::InternalSwap(WorldVelocity* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldVelocity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldVelocity_descriptor_;
  metadata.reflection = WorldVelocity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldVelocity_Events

// -------------------------------------------------------------------

// WorldVelocity_Commands

// -------------------------------------------------------------------

// WorldVelocity

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace general
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
