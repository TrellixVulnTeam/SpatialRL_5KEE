// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/gameplay/GoalSphere.schema
#ifndef SPATIALOS_SCHEMA_improbable_gameplay_GoalSphere_schema_18429746908520214083_INCLUDED
#define SPATIALOS_SCHEMA_improbable_gameplay_GoalSphere_schema_18429746908520214083_INCLUDED
#include <improbable/collections.h>
#include <improbable/math/coordinates.h>
#include <improbable/math/vector3d.h>
#include <improbable/math/vector3f.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

// Schema forward declarations.
//----------------------------------------------------------------

namespace schema {
namespace improbable {
namespace gameplay {

class Collision;
class GoalSphereData;

}  // ::improbable
}  // ::gameplay
}  // ::schema

namespace improbable {
namespace gameplay {

// Forward declarations.
//----------------------------------------------------------------

class Collision;
class GoalSphereData;

namespace detail {
const ::worker::detail::ClientComponentVtable& Vtable_GoalSphere();
struct GenericCommandObject_GoalSphere {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

// Data classes.
//----------------------------------------------------------------

class Collision {
public:
  // Main constructor.
  Collision(std::int64_t time);

  // Copyable and moveable.
  Collision(Collision&&) = default;
  Collision(const Collision&) = default;
  Collision& operator=(Collision&&) = default;
  Collision& operator=(const Collision&) = default;
  ~Collision() = default;

  bool operator==(const Collision&) const;
  bool operator!=(const Collision&) const;

  // Field time = 1.
  std::int64_t time() const;
  std::int64_t& time();
  Collision& set_time(std::int64_t);

private:
  std::int64_t _time;
};

class GoalSphereData {
public:
  // Main constructor.
  GoalSphereData(bool collided);

  // Copyable and moveable.
  GoalSphereData(GoalSphereData&&) = default;
  GoalSphereData(const GoalSphereData&) = default;
  GoalSphereData& operator=(GoalSphereData&&) = default;
  GoalSphereData& operator=(const GoalSphereData&) = default;
  ~GoalSphereData() = default;

  bool operator==(const GoalSphereData&) const;
  bool operator!=(const GoalSphereData&) const;

  // Field collided = 1.
  bool collided() const;
  bool& collided();
  GoalSphereData& set_collided(bool);

private:
  bool _collided;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::gameplay::GoalSphere;
 *
 *   GoalSphere::Update update;
 *   connection.SendComponentUpdate< GoalSphere >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< GoalSphere >(
 *       [&](const worker::ComponentUpdateOp< GoalSphere >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         GoalSphere::Update update = op.GetUpdate();
 *       });
 *
 *   GoalSphere::Data data = entity.Get< GoalSphere >();
 */
struct GoalSphere : ::worker::detail::ComponentMetaclassBase<
    GoalSphere, detail::Vtable_GoalSphere> {
  static constexpr const ::worker::ComponentId ComponentId = 1005;
  using Data = ::improbable::gameplay::GoalSphereData;
  using GenericCommandObject = detail::GenericCommandObject_GoalSphere;

  class Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::gameplay::GoalSphereData object. */
    static Update FromInitialData(const ::improbable::gameplay::GoalSphereData& data);

    /**
     * Converts to a ::improbable::gameplay::GoalSphereData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::gameplay::GoalSphereData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::gameplay::GoalSphereData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::gameplay::GoalSphereData&) const;

    // Field collided = 1.
    const ::worker::Option< bool >& collided() const;
    ::worker::Option< bool >& collided();
    Update& set_collided(bool);

    // Event field collide.
    const ::worker::List< ::improbable::gameplay::Collision >& collide() const;
    ::worker::List< ::improbable::gameplay::Collision >& collide();
    Update& add_collide(const ::improbable::gameplay::Collision&);

  private:
    ::worker::Option< bool > _collided;
    ::worker::List< ::improbable::gameplay::Collision > _collide;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Serialize_Collision(
    const ::improbable::gameplay::Collision&,
    ::schema::improbable::gameplay::Collision&);

::improbable::gameplay::Collision Deserialize_Collision(
    const ::schema::improbable::gameplay::Collision&);

void Serialize_GoalSphereData(
    const ::improbable::gameplay::GoalSphereData&,
    ::schema::improbable::gameplay::GoalSphereData&);

::improbable::gameplay::GoalSphereData Deserialize_GoalSphereData(
    const ::schema::improbable::gameplay::GoalSphereData&);

}  // ::detail
}  // ::gameplay
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_gameplay_GoalSphere_schema_18429746908520214083_INCLUDED
