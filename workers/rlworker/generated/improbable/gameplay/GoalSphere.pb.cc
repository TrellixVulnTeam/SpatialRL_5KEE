// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/gameplay/GoalSphere.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "improbable/gameplay/GoalSphere.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schema {
namespace improbable {
namespace gameplay {

namespace {

const ::google::protobuf::Descriptor* Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collision_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoalSphereData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoalSphereData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoalSphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoalSphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoalSphere_Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoalSphere_Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoalSphere_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoalSphere_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_improbable_2fgameplay_2fGoalSphere_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_improbable_2fgameplay_2fGoalSphere_2eproto() {
  protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "improbable/gameplay/GoalSphere.proto");
  GOOGLE_CHECK(file != NULL);
  Collision_descriptor_ = file->message_type(0);
  static const int Collision_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, field1_time_),
  };
  Collision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Collision_descriptor_,
      Collision::default_instance_,
      Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _has_bits_[0]),
      -1,
      -1,
      sizeof(Collision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _internal_metadata_),
      -1);
  GoalSphereData_descriptor_ = file->message_type(1);
  static const int GoalSphereData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphereData, field1_collided_),
  };
  GoalSphereData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GoalSphereData_descriptor_,
      GoalSphereData::default_instance_,
      GoalSphereData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphereData, _has_bits_[0]),
      -1,
      -1,
      sizeof(GoalSphereData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphereData, _internal_metadata_),
      -1);
  GoalSphere_descriptor_ = file->message_type(2);
  static const int GoalSphere_offsets_[1] = {
  };
  GoalSphere_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GoalSphere_descriptor_,
      GoalSphere::default_instance_,
      GoalSphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere, _has_bits_[0]),
      -1,
      -1,
      sizeof(GoalSphere),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere, _internal_metadata_),
      -1);
  GoalSphere_Events_descriptor_ = GoalSphere_descriptor_->nested_type(0);
  static const int GoalSphere_Events_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere_Events, event_collide_),
  };
  GoalSphere_Events_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GoalSphere_Events_descriptor_,
      GoalSphere_Events::default_instance_,
      GoalSphere_Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere_Events, _has_bits_[0]),
      -1,
      -1,
      sizeof(GoalSphere_Events),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere_Events, _internal_metadata_),
      -1);
  GoalSphere_Commands_descriptor_ = GoalSphere_descriptor_->nested_type(1);
  static const int GoalSphere_Commands_offsets_[1] = {
  };
  GoalSphere_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GoalSphere_Commands_descriptor_,
      GoalSphere_Commands::default_instance_,
      GoalSphere_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(GoalSphere_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalSphere_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_improbable_2fgameplay_2fGoalSphere_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Collision_descriptor_, &Collision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GoalSphereData_descriptor_, &GoalSphereData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GoalSphere_descriptor_, &GoalSphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GoalSphere_Events_descriptor_, &GoalSphere_Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GoalSphere_Commands_descriptor_, &GoalSphere_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_improbable_2fgameplay_2fGoalSphere_2eproto() {
  delete Collision::default_instance_;
  delete Collision_reflection_;
  delete GoalSphereData::default_instance_;
  delete GoalSphereData_reflection_;
  delete GoalSphere::default_instance_;
  delete GoalSphere_reflection_;
  delete GoalSphere_Events::default_instance_;
  delete GoalSphere_Events_reflection_;
  delete GoalSphere_Commands::default_instance_;
  delete GoalSphere_Commands_reflection_;
}

void protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::schema::improbable::protobuf_AddDesc_improbable_2fentity_5fstate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$improbable/gameplay/GoalSphere.proto\022\032"
    "schema.improbable.gameplay\032\035improbable/e"
    "ntity_state.proto\"*\n\tCollision\022\035\n\013field1"
    "_time\030\001 \001(\003B\010\302\363\030\004time\"7\n\016GoalSphereData\022"
    "%\n\017field1_collided\030\001 \001(\010B\014\302\363\030\010collided\"\313"
    "\003\n\nGoalSphere\032F\n\006Events\022<\n\revent_collide"
    "\030\001 \003(\0132%.schema.improbable.gameplay.Coll"
    "ision\032\n\n\010Commands2h\n\023component_extension"
    "\022\036.schema.improbable.EntityState\030\355\007 \001(\0132"
    "*.schema.improbable.gameplay.GoalSphereD"
    "ata2g\n\017event_extension\022\036.schema.improbab"
    "le.EntityEvent\030\355\007 \001(\0132-.schema.improbabl"
    "e.gameplay.GoalSphere.Events2m\n\021command_"
    "extension\022 .schema.improbable.EntityComm"
    "and\030\355\007 \001(\0132/.schema.improbable.gameplay."
    "GoalSphere.Commands:\'\302\363\030#\n\036improbable.ga"
    "meplay.GoalSphere\020\355\007B\026B\024GoalSphereOuterC"
    "lass", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "improbable/gameplay/GoalSphere.proto", &protobuf_RegisterTypes);
  Collision::default_instance_ = new Collision();
  GoalSphereData::default_instance_ = new GoalSphereData();
  GoalSphere::default_instance_ = new GoalSphere();
  GoalSphere_Events::default_instance_ = new GoalSphere_Events();
  GoalSphere_Commands::default_instance_ = new GoalSphere_Commands();
  Collision::default_instance_->InitAsDefaultInstance();
  GoalSphereData::default_instance_->InitAsDefaultInstance();
  GoalSphere::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityState::default_instance(),
    1005, 11, false, false,
    &::schema::improbable::gameplay::GoalSphereData::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityEvent::default_instance(),
    1005, 11, false, false,
    &::schema::improbable::gameplay::GoalSphere_Events::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::schema::improbable::EntityCommand::default_instance(),
    1005, 11, false, false,
    &::schema::improbable::gameplay::GoalSphere_Commands::default_instance());
  GoalSphere_Events::default_instance_->InitAsDefaultInstance();
  GoalSphere_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_improbable_2fgameplay_2fGoalSphere_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_improbable_2fgameplay_2fGoalSphere_2eproto {
  StaticDescriptorInitializer_improbable_2fgameplay_2fGoalSphere_2eproto() {
    protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  }
} static_descriptor_initializer_improbable_2fgameplay_2fGoalSphere_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Collision::kField1TimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Collision::Collision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.gameplay.Collision)
}

void Collision::InitAsDefaultInstance() {
}

Collision::Collision(const Collision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.gameplay.Collision)
}

void Collision::SharedCtor() {
  _cached_size_ = 0;
  field1_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collision::~Collision() {
  // @@protoc_insertion_point(destructor:schema.improbable.gameplay.Collision)
  SharedDtor();
}

void Collision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collision_descriptor_;
}

const Collision& Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  return *default_instance_;
}

Collision* Collision::default_instance_ = NULL;

Collision* Collision::New(::google::protobuf::Arena* arena) const {
  Collision* n = new Collision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Collision::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.gameplay.Collision)
  field1_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.gameplay.Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_time_)));
          set_has_field1_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.gameplay.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.gameplay.Collision)
  return false;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.gameplay.Collision)
  // optional int64 field1_time = 1;
  if (has_field1_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.gameplay.Collision)
}

::google::protobuf::uint8* Collision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.gameplay.Collision)
  // optional int64 field1_time = 1;
  if (has_field1_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.gameplay.Collision)
  return target;
}

int Collision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.gameplay.Collision)
  int total_size = 0;

  // optional int64 field1_time = 1;
  if (has_field1_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->field1_time());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.gameplay.Collision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Collision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Collision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.gameplay.Collision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.gameplay.Collision)
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.gameplay.Collision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_time()) {
      set_field1_time(from.field1_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.gameplay.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.gameplay.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {

  return true;
}

void Collision::Swap(Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Collision::InternalSwap(Collision* other) {
  std::swap(field1_time_, other->field1_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collision_descriptor_;
  metadata.reflection = Collision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Collision

// optional int64 field1_time = 1;
bool Collision::has_field1_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Collision::set_has_field1_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Collision::clear_has_field1_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Collision::clear_field1_time() {
  field1_time_ = GOOGLE_LONGLONG(0);
  clear_has_field1_time();
}
 ::google::protobuf::int64 Collision::field1_time() const {
  // @@protoc_insertion_point(field_get:schema.improbable.gameplay.Collision.field1_time)
  return field1_time_;
}
 void Collision::set_field1_time(::google::protobuf::int64 value) {
  set_has_field1_time();
  field1_time_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.gameplay.Collision.field1_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalSphereData::kField1CollidedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalSphereData::GoalSphereData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.gameplay.GoalSphereData)
}

void GoalSphereData::InitAsDefaultInstance() {
}

GoalSphereData::GoalSphereData(const GoalSphereData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.gameplay.GoalSphereData)
}

void GoalSphereData::SharedCtor() {
  _cached_size_ = 0;
  field1_collided_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoalSphereData::~GoalSphereData() {
  // @@protoc_insertion_point(destructor:schema.improbable.gameplay.GoalSphereData)
  SharedDtor();
}

void GoalSphereData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoalSphereData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalSphereData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoalSphereData_descriptor_;
}

const GoalSphereData& GoalSphereData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  return *default_instance_;
}

GoalSphereData* GoalSphereData::default_instance_ = NULL;

GoalSphereData* GoalSphereData::New(::google::protobuf::Arena* arena) const {
  GoalSphereData* n = new GoalSphereData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalSphereData::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.gameplay.GoalSphereData)
  field1_collided_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GoalSphereData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.gameplay.GoalSphereData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool field1_collided = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &field1_collided_)));
          set_has_field1_collided();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.gameplay.GoalSphereData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.gameplay.GoalSphereData)
  return false;
#undef DO_
}

void GoalSphereData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.gameplay.GoalSphereData)
  // optional bool field1_collided = 1;
  if (has_field1_collided()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->field1_collided(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.gameplay.GoalSphereData)
}

::google::protobuf::uint8* GoalSphereData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.gameplay.GoalSphereData)
  // optional bool field1_collided = 1;
  if (has_field1_collided()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->field1_collided(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.gameplay.GoalSphereData)
  return target;
}

int GoalSphereData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.gameplay.GoalSphereData)
  int total_size = 0;

  // optional bool field1_collided = 1;
  if (has_field1_collided()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalSphereData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.gameplay.GoalSphereData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GoalSphereData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalSphereData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.gameplay.GoalSphereData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.gameplay.GoalSphereData)
    MergeFrom(*source);
  }
}

void GoalSphereData::MergeFrom(const GoalSphereData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.gameplay.GoalSphereData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1_collided()) {
      set_field1_collided(from.field1_collided());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GoalSphereData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.gameplay.GoalSphereData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalSphereData::CopyFrom(const GoalSphereData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.gameplay.GoalSphereData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalSphereData::IsInitialized() const {

  return true;
}

void GoalSphereData::Swap(GoalSphereData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalSphereData::InternalSwap(GoalSphereData* other) {
  std::swap(field1_collided_, other->field1_collided_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalSphereData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoalSphereData_descriptor_;
  metadata.reflection = GoalSphereData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalSphereData

// optional bool field1_collided = 1;
bool GoalSphereData::has_field1_collided() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoalSphereData::set_has_field1_collided() {
  _has_bits_[0] |= 0x00000001u;
}
void GoalSphereData::clear_has_field1_collided() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoalSphereData::clear_field1_collided() {
  field1_collided_ = false;
  clear_has_field1_collided();
}
 bool GoalSphereData::field1_collided() const {
  // @@protoc_insertion_point(field_get:schema.improbable.gameplay.GoalSphereData.field1_collided)
  return field1_collided_;
}
 void GoalSphereData::set_field1_collided(bool value) {
  set_has_field1_collided();
  field1_collided_ = value;
  // @@protoc_insertion_point(field_set:schema.improbable.gameplay.GoalSphereData.field1_collided)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalSphere_Events::kEventCollideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalSphere_Events::GoalSphere_Events()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.gameplay.GoalSphere.Events)
}

void GoalSphere_Events::InitAsDefaultInstance() {
}

GoalSphere_Events::GoalSphere_Events(const GoalSphere_Events& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.gameplay.GoalSphere.Events)
}

void GoalSphere_Events::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoalSphere_Events::~GoalSphere_Events() {
  // @@protoc_insertion_point(destructor:schema.improbable.gameplay.GoalSphere.Events)
  SharedDtor();
}

void GoalSphere_Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoalSphere_Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalSphere_Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoalSphere_Events_descriptor_;
}

const GoalSphere_Events& GoalSphere_Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  return *default_instance_;
}

GoalSphere_Events* GoalSphere_Events::default_instance_ = NULL;

GoalSphere_Events* GoalSphere_Events::New(::google::protobuf::Arena* arena) const {
  GoalSphere_Events* n = new GoalSphere_Events;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalSphere_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.gameplay.GoalSphere.Events)
  event_collide_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GoalSphere_Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.gameplay.GoalSphere.Events)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.improbable.gameplay.Collision event_collide = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_event_collide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_event_collide()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_event_collide;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.gameplay.GoalSphere.Events)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.gameplay.GoalSphere.Events)
  return false;
#undef DO_
}

void GoalSphere_Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.gameplay.GoalSphere.Events)
  // repeated .schema.improbable.gameplay.Collision event_collide = 1;
  for (unsigned int i = 0, n = this->event_collide_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_collide(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.gameplay.GoalSphere.Events)
}

::google::protobuf::uint8* GoalSphere_Events::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.gameplay.GoalSphere.Events)
  // repeated .schema.improbable.gameplay.Collision event_collide = 1;
  for (unsigned int i = 0, n = this->event_collide_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->event_collide(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.gameplay.GoalSphere.Events)
  return target;
}

int GoalSphere_Events::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.gameplay.GoalSphere.Events)
  int total_size = 0;

  // repeated .schema.improbable.gameplay.Collision event_collide = 1;
  total_size += 1 * this->event_collide_size();
  for (int i = 0; i < this->event_collide_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_collide(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalSphere_Events::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.gameplay.GoalSphere.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GoalSphere_Events* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalSphere_Events>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.gameplay.GoalSphere.Events)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.gameplay.GoalSphere.Events)
    MergeFrom(*source);
  }
}

void GoalSphere_Events::MergeFrom(const GoalSphere_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.gameplay.GoalSphere.Events)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  event_collide_.MergeFrom(from.event_collide_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GoalSphere_Events::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.gameplay.GoalSphere.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalSphere_Events::CopyFrom(const GoalSphere_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.gameplay.GoalSphere.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalSphere_Events::IsInitialized() const {

  return true;
}

void GoalSphere_Events::Swap(GoalSphere_Events* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalSphere_Events::InternalSwap(GoalSphere_Events* other) {
  event_collide_.UnsafeArenaSwap(&other->event_collide_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalSphere_Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoalSphere_Events_descriptor_;
  metadata.reflection = GoalSphere_Events_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalSphere_Commands::GoalSphere_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.gameplay.GoalSphere.Commands)
}

void GoalSphere_Commands::InitAsDefaultInstance() {
}

GoalSphere_Commands::GoalSphere_Commands(const GoalSphere_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.gameplay.GoalSphere.Commands)
}

void GoalSphere_Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoalSphere_Commands::~GoalSphere_Commands() {
  // @@protoc_insertion_point(destructor:schema.improbable.gameplay.GoalSphere.Commands)
  SharedDtor();
}

void GoalSphere_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoalSphere_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalSphere_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoalSphere_Commands_descriptor_;
}

const GoalSphere_Commands& GoalSphere_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  return *default_instance_;
}

GoalSphere_Commands* GoalSphere_Commands::default_instance_ = NULL;

GoalSphere_Commands* GoalSphere_Commands::New(::google::protobuf::Arena* arena) const {
  GoalSphere_Commands* n = new GoalSphere_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalSphere_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.gameplay.GoalSphere.Commands)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GoalSphere_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.gameplay.GoalSphere.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.gameplay.GoalSphere.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.gameplay.GoalSphere.Commands)
  return false;
#undef DO_
}

void GoalSphere_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.gameplay.GoalSphere.Commands)
}

::google::protobuf::uint8* GoalSphere_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.gameplay.GoalSphere.Commands)
  return target;
}

int GoalSphere_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.gameplay.GoalSphere.Commands)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalSphere_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GoalSphere_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalSphere_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.gameplay.GoalSphere.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.gameplay.GoalSphere.Commands)
    MergeFrom(*source);
  }
}

void GoalSphere_Commands::MergeFrom(const GoalSphere_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GoalSphere_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalSphere_Commands::CopyFrom(const GoalSphere_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.gameplay.GoalSphere.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalSphere_Commands::IsInitialized() const {

  return true;
}

void GoalSphere_Commands::Swap(GoalSphere_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalSphere_Commands::InternalSwap(GoalSphere_Commands* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalSphere_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoalSphere_Commands_descriptor_;
  metadata.reflection = GoalSphere_Commands_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalSphere::kComponentExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityState,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::gameplay::GoalSphereData >, 11, false >
  GoalSphere::component_extension(kComponentExtensionFieldNumber, ::schema::improbable::gameplay::GoalSphereData::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalSphere::kEventExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityEvent,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::gameplay::GoalSphere_Events >, 11, false >
  GoalSphere::event_extension(kEventExtensionFieldNumber, ::schema::improbable::gameplay::GoalSphere_Events::default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalSphere::kCommandExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::schema::improbable::EntityCommand,
    ::google::protobuf::internal::MessageTypeTraits< ::schema::improbable::gameplay::GoalSphere_Commands >, 11, false >
  GoalSphere::command_extension(kCommandExtensionFieldNumber, ::schema::improbable::gameplay::GoalSphere_Commands::default_instance());
GoalSphere::GoalSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.improbable.gameplay.GoalSphere)
}

void GoalSphere::InitAsDefaultInstance() {
}

GoalSphere::GoalSphere(const GoalSphere& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:schema.improbable.gameplay.GoalSphere)
}

void GoalSphere::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoalSphere::~GoalSphere() {
  // @@protoc_insertion_point(destructor:schema.improbable.gameplay.GoalSphere)
  SharedDtor();
}

void GoalSphere::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoalSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalSphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoalSphere_descriptor_;
}

const GoalSphere& GoalSphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_improbable_2fgameplay_2fGoalSphere_2eproto();
  return *default_instance_;
}

GoalSphere* GoalSphere::default_instance_ = NULL;

GoalSphere* GoalSphere::New(::google::protobuf::Arena* arena) const {
  GoalSphere* n = new GoalSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.improbable.gameplay.GoalSphere)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GoalSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.improbable.gameplay.GoalSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:schema.improbable.gameplay.GoalSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.improbable.gameplay.GoalSphere)
  return false;
#undef DO_
}

void GoalSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.improbable.gameplay.GoalSphere)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.improbable.gameplay.GoalSphere)
}

::google::protobuf::uint8* GoalSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schema.improbable.gameplay.GoalSphere)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.improbable.gameplay.GoalSphere)
  return target;
}

int GoalSphere::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:schema.improbable.gameplay.GoalSphere)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.improbable.gameplay.GoalSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GoalSphere* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.improbable.gameplay.GoalSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.improbable.gameplay.GoalSphere)
    MergeFrom(*source);
  }
}

void GoalSphere::MergeFrom(const GoalSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.improbable.gameplay.GoalSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GoalSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.improbable.gameplay.GoalSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalSphere::CopyFrom(const GoalSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.improbable.gameplay.GoalSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalSphere::IsInitialized() const {

  return true;
}

void GoalSphere::Swap(GoalSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalSphere::InternalSwap(GoalSphere* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalSphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoalSphere_descriptor_;
  metadata.reflection = GoalSphere_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalSphere_Events

// repeated .schema.improbable.gameplay.Collision event_collide = 1;
int GoalSphere_Events::event_collide_size() const {
  return event_collide_.size();
}
void GoalSphere_Events::clear_event_collide() {
  event_collide_.Clear();
}
const ::schema::improbable::gameplay::Collision& GoalSphere_Events::event_collide(int index) const {
  // @@protoc_insertion_point(field_get:schema.improbable.gameplay.GoalSphere.Events.event_collide)
  return event_collide_.Get(index);
}
::schema::improbable::gameplay::Collision* GoalSphere_Events::mutable_event_collide(int index) {
  // @@protoc_insertion_point(field_mutable:schema.improbable.gameplay.GoalSphere.Events.event_collide)
  return event_collide_.Mutable(index);
}
::schema::improbable::gameplay::Collision* GoalSphere_Events::add_event_collide() {
  // @@protoc_insertion_point(field_add:schema.improbable.gameplay.GoalSphere.Events.event_collide)
  return event_collide_.Add();
}
::google::protobuf::RepeatedPtrField< ::schema::improbable::gameplay::Collision >*
GoalSphere_Events::mutable_event_collide() {
  // @@protoc_insertion_point(field_mutable_list:schema.improbable.gameplay.GoalSphere.Events.event_collide)
  return &event_collide_;
}
const ::google::protobuf::RepeatedPtrField< ::schema::improbable::gameplay::Collision >&
GoalSphere_Events::event_collide() const {
  // @@protoc_insertion_point(field_list:schema.improbable.gameplay.GoalSphere.Events.event_collide)
  return event_collide_;
}

// -------------------------------------------------------------------

// GoalSphere_Commands

// -------------------------------------------------------------------

// GoalSphere

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gameplay
}  // namespace improbable
}  // namespace schema

// @@protoc_insertion_point(global_scope)
